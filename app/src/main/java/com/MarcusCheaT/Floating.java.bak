package com.MarcusCheaT;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.Service;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.ColorStateList;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.PixelFormat;
import android.graphics.Point;
import android.graphics.Typeface;
import android.graphics.drawable.GradientDrawable;
import android.os.Build;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.util.Base64;
import android.view.Display;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;
import java.io.File;

public class Floating extends Service {
    WindowManager windowManager;

    int screenWidth, screenHeight, type, screenDpi;
    float density;

    WindowManager.LayoutParams iconLayoutParams, mainLayoutParams, canvasLayoutParams;
    RelativeLayout iconLayout;
    LinearLayout mainLayout;
    CanvasView canvasLayout;

    RelativeLayout closeLayout, maximizeLayout, minimizeLayout;
    RelativeLayout.LayoutParams closeLayoutParams, maximizeLayoutParams, minimizeLayoutParams;

    ImageView iconImg;

    String[] listTab = {"ùô¥ùöÇùôø ùôºùô¥ùôΩùöÑ", "ùô∞ùô∏ùôº ùôºùô¥ùôΩùöÑ", "ùô∑ùô¥ùôªùôøùô¥ùöÅ", "ùöÇùô¥ùöÉùöÉùô∏ùôΩùô∂ùöÇ", "ùô∏ùôΩùôµùôæ"};
    LinearLayout[] pageLayouts = new LinearLayout[listTab.length];
    int lastSelectedPage = 0;

    SharedPreferences configPrefs;
    long sleepTime = 1000 / 60;

    boolean isMaximized = false;
    int lastMaximizedX = 0, lastMaximizedY = 0;
    int lastMaximizedW = 0, lastMaximizedH = 0;

    int layoutWidth;
    int layoutHeight;
    int iconSize;
    int menuButtonSize;
    int tabWidth;
    int tabHeight;

    float mediumSize = 5.0f;

    private static final int RadioColor = 0;

    private native void onSendConfig(String s, String v);
    static native  void Switch(int i,boolean jboolean1);
    private native void onCanvasDraw(Canvas canvas, int w, int h, float d);

    void CreateCanvas() {
        final int FLAGS = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL |
                WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN |
                WindowManager.LayoutParams.FLAG_FULLSCREEN |
                WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR |
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
                WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS |
                WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS |
                WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;

        canvasLayoutParams = new WindowManager.LayoutParams(screenWidth, screenHeight, type, FLAGS, PixelFormat.RGBA_8888);

        canvasLayoutParams.x = 0;
        canvasLayoutParams.y = 0;
        canvasLayoutParams.gravity = Gravity.LEFT | Gravity.TOP;

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            canvasLayoutParams.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
        }

        canvasLayout = new CanvasView(this);
        windowManager.addView(canvasLayout, canvasLayoutParams);
    }

    private class CanvasView extends View {
        public CanvasView(Context context) {
            super(context);
        }

        @Override
        protected void onDraw(Canvas canvas) {
            try {
                onCanvasDraw(canvas, screenWidth, screenHeight, density);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    private void UpdateConfiguration(String s, Object v) {
        try {
            onSendConfig(s, v.toString());

            SharedPreferences.Editor configEditor = configPrefs.edit();
            configEditor.putString(s, v.toString());
            configEditor.apply();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();

        if (mUpdateCanvas.isAlive()) {
            mUpdateCanvas.interrupt();
        }
        if (mUpdateThread.isAlive()) {
            mUpdateThread.interrupt();
        }

        if (iconLayout != null) {
            windowManager.removeView(iconLayout);
        }
        if (mainLayout != null) {
            windowManager.removeView(mainLayout);
        }
        if (canvasLayout != null) {
            windowManager.removeView(canvasLayout);
        }
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        super.onStartCommand(intent, flags, startId);
        return START_NOT_STICKY;
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        configPrefs = getSharedPreferences("config", MODE_PRIVATE);
        windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);

        Point screenSize = new Point();
        Display display = windowManager.getDefaultDisplay();
        display.getRealSize(screenSize);

        screenWidth = screenSize.x;
        screenHeight = screenSize.y;
        screenDpi = getResources().getDisplayMetrics().densityDpi;

        density = getResources().getDisplayMetrics().density;

        layoutWidth = convertSizeToDp(320);
        layoutHeight = convertSizeToDp(340);
        iconSize = convertSizeToDp(240);
        menuButtonSize = convertSizeToDp(25);
        tabWidth = convertSizeToDp(64);
        tabHeight = convertSizeToDp(35);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            type = 2038;
        } else {
            type = 2002;
        }

        CreateIcon();
        CreateLayout();
        CreateCanvas();

        mUpdateThread.start();
        mUpdateCanvas.start();
    }

    void AddFeatures() {
       
		AddText(0, "Anticheat Hook:", 7.f, Color.BLACK);
		
		
		AddCheckbox(0, "·¥ç·¥õ·¥©  ú·¥è·¥è·¥ã·¥á·¥Ö  ôy·¥©·¥ÄÍú±Íú±", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("1", isChecked ? 1 : 0);
                }
            });
        AddText(0, "ESP Generic Adjustment:Ô∏è", 6.5f, Color.BLACK);
        AddCheckbox(0, " ü…™…¥·¥á", false, new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                UpdateConfiguration("ESP::LINE", isChecked ? 1 : 0);
            }
        });
      /*  AddCheckbox(0, " ô·¥èx", false, new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                UpdateConfiguration("ESP::BOX", isChecked ? 1 : 0);
            }
        });
        */
        AddCheckbox(0, " ú·¥á·¥Ä ü·¥õ ú", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("ESP::HEALTH", isChecked ? 1 : 0);
                }
            });
        
        AddText(0, "Customize Box", 7.0f, Color.BLACK);
        AddRadioButton(0, new String[]{"·¥Ö…™Íú±·¥Ä ô ü·¥á" , " Ä·¥á·¥Ö  ô·¥èx", " ô ü·¥Ä·¥Ñ·¥ã  ô·¥èx", "·¥° ú…™·¥õ·¥á  ô·¥èx","…¢ Ä·¥á·¥á…¥  ô·¥èx","y·¥á ü ü·¥è·¥°  ô·¥èx",}, 0, new RadioGroup.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(RadioGroup group, int checkedId) {
                    UpdateConfiguration("ESP::BOX", checkedId);
                }
            });
        /*AddText(0, "HEALTH OPTIONS: ", 7.0f, Color.RED);
        AddRadioButton(0, new String[]{"…¥·¥è Ä·¥ç·¥Ä ü" , "·¥†·¥á Ä·¥õ…™·¥Ñ·¥Ä ü", " ú·¥è Ä…™·¥¢·¥è…¥·¥õ·¥Ä ü",}, 0, new RadioGroup.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(RadioGroup group, int checkedId) {
                    UpdateConfiguration("1", checkedId);
                }
            });
        
        */
        AddCheckbox(0, "…¥·¥Ä·¥ç·¥á", false, new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                UpdateConfiguration("ESP::NAME", isChecked ? 1 : 0);
            }
        });
        
        AddCheckbox(0, "Íú±·¥ã·¥á ü·¥á·¥õ·¥è…¥ |  ô·¥á·¥õ·¥Ä ·¥ç·¥Äy ·¥Ñ Ä·¥ÄÍú± ú", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("ESP::SKELETON", isChecked ? 1 : 0);
                }
            });
            
        
        
        AddCheckbox(0, "·¥Ö…™Íú±·¥õ·¥Ä…¥·¥Ñ·¥á", false, new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                UpdateConfiguration("ESP::DISTANCE", isChecked ? 1 : 0);
            }
        });
        
        
        
        
        AddText(0, "ESP World:Ô∏è", 7.f, Color.BLACK);
        AddCheckbox(0, "·¥Ä ü ü ·¥†·¥á ú…™·¥Ñ ü·¥áÍú±", false, new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                UpdateConfiguration("ESP::VEHICLE", isChecked ? 1 : 0);
            }
        });
        AddCheckbox(0, "…¢ Ä·¥á…¥·¥Ä·¥Ö·¥á ·¥°·¥Ä Ä…¥…™…¥…¢", false, new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                UpdateConfiguration("ESP::GRENADE", isChecked ? 1 : 0);
            }
        });
		
        AddCheckbox(0, " ü·¥è·¥è·¥õ  ô·¥èx", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("LootBox", isChecked ? 1 : 0);
                }
            });
		
            
            
        AddText(1, "Aim Adjustment:Ô∏è", 7.f, Color.BLACK);

     /*   AddCheckbox(1, "Íú∞·¥è·¥† ·¥Ä…™·¥ç ô·¥è·¥õ ( Ä…™Íú±·¥ã)", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("AIM::AIMBOT", isChecked ? 1 : 0);
                }
            });


*/
        AddCheckbox(1, "Íú∞·¥è·¥†  ô·¥ú ü ü·¥á·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã…™…¥…¢", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("AIM::AIMBULLET", isChecked ? 1 : 0);
                }
            });
        AddText(1, "Aim Location: ", 6.0f, Color.BLACK);
        AddRadioButton(1, new String[]{" ú·¥á·¥Ä·¥Ö", " ô·¥è·¥Öy"}, 0, new RadioGroup.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(RadioGroup group, int checkedId) {
                    UpdateConfiguration("AIM::LOCATION", checkedId);
                }
            });
        AddText(1, "Aim Target: ", 6.0f, Color.BLACK);
        AddRadioButton(1, new String[]{"·¥Ñ ü·¥èÍú±·¥áÍú±·¥õ ·¥õ·¥è ·¥Ö…™Íú±·¥õ·¥Ä…¥·¥Ñ·¥á ·¥© Ä…™·¥è Ä…™·¥õy", "…™…¥Íú±…™·¥Ö·¥á ·¥Ñ…™ Ä·¥Ñ ü·¥á ·¥© Ä…™·¥è Ä…™·¥õy"}, 0, new RadioGroup.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(RadioGroup group, int checkedId) {
                    UpdateConfiguration("AIM::TARGET", checkedId);
                }
            });
        AddSeekbar(1, "Íú∞·¥è·¥† Íú±…™·¥¢·¥á", 0, 500, 0, "", "", new SeekBar.OnSeekBarChangeListener() {
                @Override
                public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                    UpdateConfiguration("AIM::SIZE", progress);
                }

                @Override
                public void onStartTrackingTouch(SeekBar seekBar) {

                }

                @Override
                public void onStopTrackingTouch(SeekBar seekBar) {

                }
            });
        AddText(1, "Aim Trigger: ", 6.0f, Color.BLACK);
        AddRadioButton(1, new String[]{"…¥·¥è·¥õ ú…™…¥…¢" , "Íú± ú·¥è·¥è·¥õ…™…¥…¢", "·¥Ä…™·¥ç…™…¥…¢", "Íú± ú·¥è·¥è·¥õ…™…¥…¢ & ·¥Ä…™·¥ç…™…¥…¢",}, 0, new RadioGroup.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(RadioGroup group, int checkedId) {
                    UpdateConfiguration("AIM::TRIGGER", checkedId);
                }
            });
        AddCheckbox(1, "·¥© Ä·¥á·¥Ö…™·¥Ñ·¥õ…™·¥è…¥", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("AIM::PREDICTION", isChecked ? 1 : 0);
                }
            });
        AddCheckbox(1, "·¥Ä…™·¥ç ·¥ã…¥·¥è·¥Ñ·¥ã·¥á·¥Ö", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("AIM::KNOCKED", isChecked ? 1 : 0);
                }
            });
        AddCheckbox(1, "·¥†…™Íú±…™ ô…™ ü…™·¥õy ·¥Ñ ú·¥á·¥Ñ·¥ã", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("AIM::VISCHECK", isChecked ? 1 : 0);
                }
            });

        AddSeekbar(1, "Íú±·¥ç·¥è·¥è·¥õ ú…¥·¥áÍú±Íú±", 0, 200, 0, "", "", new SeekBar.OnSeekBarChangeListener() {
                @Override
                public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                    UpdateConfiguration("m", progress);
                }

                @Override
                public void onStartTrackingTouch(SeekBar seekBar) {

                }

                @Override
                public void onStopTrackingTouch(SeekBar seekBar) {

                }
            });

        
        
		
		//*AddText(2, "‚ö†Ô∏è We have removed risky MEMORY Features because SERVER BASED DETECTION is High Now!", 6.5f, Color.RED);*//
  
		AddText(2, "Helper Menu:", 7.f, Color.BLACK);
        
        
        
		
		
		
		AddCheckbox(2, "·¥á…¥·¥Ä ô ü·¥á  Ä·¥á·¥Ñ·¥è…™ ü", false, new CompoundButton.OnCheckedChangeListener() {
				@Override
				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

					Switch(4, isChecked);
				}
			}); 
            
            
        AddCheckbox(2, "·¥Ä…™·¥ç ô·¥è·¥õ 180¬∞", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(7, isChecked);
                }
			}); 
            
                    
        AddCheckbox(2, "x  ú…™·¥õ ·¥áÍú∞Íú∞·¥á·¥Ñ·¥õ", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(27, isChecked);
                }
			}); 
            
            AddCheckbox(2, "·¥°·¥Ä ü ü  ü·¥è·¥è·¥õ", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(21, isChecked);
                }
			}); 

        AddCheckbox(2, " ô ü·¥Ä·¥Ñ·¥ã  ô·¥è·¥Öy", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(5, isChecked);
                }
			}); 
            
            
        AddCheckbox(2, " ô ü·¥Ä·¥Ñ·¥ã Íú±·¥ãy", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(6, isChecked);
                }
			}); 
            
            
        AddCheckbox(2, " Ä·¥á·¥ç·¥è·¥†·¥á Íú∞·¥è…¢", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(9, isChecked);
                }
			}); 
            
        AddCheckbox(2, "Íú±·¥õ·¥Ä·¥õ·¥ú·¥á ·¥© ü·¥Äy·¥á Ä", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(14, isChecked);
                }
			}); 
            
        AddCheckbox(2, "·¥Ö·¥Ä Ä·¥ã ·¥ç·¥è·¥Ö·¥á", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(15, isChecked);
                }
			}); 
        AddCheckbox(2, "·¥Ö·¥áÍú±·¥á Ä·¥õ ·¥ç·¥Ä·¥©", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(16, isChecked);
                }
			}); 
            
        AddCheckbox(2, " Ä·¥á·¥Ö Íú∞·¥è…¢", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(30, isChecked);
                }
			}); 
            
        AddCheckbox(2, " ô ü·¥Ä·¥Ñ·¥ã Íú∞·¥è…¢", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(31, isChecked);
                }
			}); 
            
        AddCheckbox(2, "…¢ Ä·¥á·¥á…¥ Íú∞·¥è…¢", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(32, isChecked);
                }
			}); 
            
            
        AddCheckbox(2, "·¥Ö·¥Ä Ä·¥ã  ô ü·¥ú·¥á Íú∞·¥è…¢", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(33, isChecked);
                }
			}); 
            
        AddCheckbox(2, "·¥Ñy·¥Ä…¥ Íú∞·¥è…¢", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(34, isChecked);
                }
			}); 
            
        AddCheckbox(2, "·¥©·¥ú Ä·¥© ü·¥á Íú∞·¥è…¢", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(35, isChecked);
                }
			}); 
        AddCheckbox(2, " ü…™·¥õ·¥á …¢ Ä·¥á·¥á…¥ Íú∞·¥è…¢", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(36, isChecked);
                }
			}); 
        AddCheckbox(2, "…¥·¥è ·¥õ Ä·¥á·¥á", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(17, isChecked);
                }
			}); 
        
            AddCheckbox(2, "Íú∞ ü·¥ÄÍú± ú [ ô·¥ú…¢]", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(13, isChecked);
                }
			}); 
            
        AddText(2, "# HIGH RISK, ROOT ONLY #:", 7.f, Color.BLACK);
        
        AddCheckbox(2, "·¥Ä…™·¥ç ô·¥è·¥õ 360¬∞", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(37, isChecked);
                }
			}); 
        
        AddCheckbox(2, "…™…¥Íú±·¥õ·¥Ä…¥·¥õ  ú…™·¥õ", false, new CompoundButton.OnCheckedChangeListener() {
				@Override
				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

					Switch(38, isChecked);
				}
			}); 
        
        AddCheckbox(2, "·¥ç·¥Ä…¢…¢…™·¥Ñ  ô·¥ú ü ü·¥á·¥õ", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(22, isChecked);
                }
            }); 

        
        AddCheckbox(2, "·¥°·¥Ä ü ü Íú± ú·¥è·¥õ", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(29, isChecked);
                }
			}); 

        AddCheckbox(2, "Íú∞ ü·¥ÄÍú± ú ·¥†2 |  ü·¥Ä…¢", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(23, isChecked);
                }
			}); 
            
        AddCheckbox(2, "Íú± ü·¥è·¥° ·¥ç·¥è·¥õ…™·¥è…¥", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(19, isChecked);
                }
			}); 
			
			AddCheckbox(2, "Íú∞…™x Íú±·¥õ·¥ú·¥Ñ·¥ã", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(18, isChecked);
                }
			}); 
            
            
        AddCheckbox(2, "·¥Ä…¥·¥õ…™ ·¥©·¥ú ü ü", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(20, isChecked);
                }
			}); 
            
            
        AddCheckbox(2, "Íú±·¥©·¥á·¥á·¥Ö ·¥ã…¥·¥è·¥Ñ·¥ã·¥á·¥Ö", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(26, isChecked);
                }
			}); 
            
        AddCheckbox(2, " ü·¥è…¥…¢ ·¥ä·¥ú·¥ç·¥©", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(12, isChecked);
                }
			}); 
            
        
        AddCheckbox(2, "·¥Ñ·¥Ä Ä Íú±·¥©·¥á·¥á·¥Ö", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(10, isChecked);
                }
			}); 
            
        AddCheckbox(2, "·¥Ñ·¥Ä Ä ·¥ä·¥ú·¥ç·¥©", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(11, isChecked);
                }
			}); 
            
        AddCheckbox(2, "·¥Ä·¥ú·¥õ·¥è ·¥Ö Ä…™·¥†·¥á ·¥ç·¥è·¥Ö·¥á", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(28, isChecked);
                }
			}); 
            
        AddCheckbox(2, "Íú±·¥õ·¥Ä…¥·¥Ö Íú±·¥Ñ·¥è·¥©·¥á ", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(24, isChecked);
                }
			}); 
        AddCheckbox(2, "·¥© Ä·¥è…¥·¥á Íú±·¥Ñ·¥è·¥©·¥á", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

                    Switch(25, isChecked);
                }
			}); 

        
        
            
        
        
        
            
        
        
		 
		 
                                                                                                                                                                                                        AddText(4, "Info:", 7.f, Color.BLACK);
                                                                                                                                                                                                                                 AddText(4, "·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ñ ú·¥Ä…¥…¥·¥á ü: ‚òÖ@·¥ç·¥Ä Ä·¥Ñ·¥úÍú±·¥Ñ ú·¥á·¥Ä·¥õ‚òÖ", 5.f, Color.BLACK);
                                                                                                                                                                                                                                 AddText(4, "·¥Ö·¥á·¥†·¥á ü·¥è·¥©·¥á Ä: ‚òÖ@·¥ç·¥Ä Ä·¥Ñ·¥úÍú±·¥è·¥°…¥·¥á Ä‚òÖ", 5.f, Color.BLACK);
                                                                                                                                                                                                                                 AddText(4, "         ¬©Copyright | @MarcuscheaT", 5.f, Color.BLACK);
         
        
        AddText(3, "Setting Menu:", 7.f, Color.BLACK);
        
        
        AddCheckbox(3, " ü·¥è·¥° …¢ Ä·¥Ä·¥© ú…™·¥ÑÍú± ·¥ç·¥è·¥Ö·¥á", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("AIM::AIMBULLET", isChecked ? 1 : 0);
                }
            });
            
        AddCheckbox(3, " ú…™·¥Ö·¥á Íú∞·¥©Íú±", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("AIM::AIMBULLET", isChecked ? 1 : 0);
                }
            });
        AddCheckbox(3, " ú…™·¥Ö·¥á *·¥õ·¥Ä Ä…¢·¥á·¥õ ·¥õ·¥áÍú±·¥õ", false, new CompoundButton.OnCheckedChangeListener() {
                @Override
                public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    UpdateConfiguration("AIM::AIMBULLET", isChecked ? 1 : 0);
                }
            });
            
        AddSeekbar(3, "·¥ç·¥è·¥Ö ·¥ç·¥á…¥·¥ú ·¥è·¥©·¥Ä·¥Ñ…™·¥õy", 1, 100, 100, "", "%", new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                mainLayout.setAlpha((float) progress / 100.f);
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {

            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
            }
        });

        AddSeekbar(3, "…™·¥Ñ·¥è…¥ Íú±…™·¥¢·¥á", 50, 200, 100, "", "%", new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                ViewGroup.LayoutParams iconParams = iconImg.getLayoutParams();
                iconParams.width = (int) ((float) 75 * ((float) progress / 100.f));
                iconParams.height = (int) ((float) 75 * ((float) progress / 100.f));
                iconImg.setLayoutParams(iconParams);
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
                iconLayout.setVisibility(View.VISIBLE);
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                iconLayout.setVisibility(View.GONE);
            }
        });
        AddSeekbar(3, "…™·¥Ñ·¥è…¥ ·¥è·¥©·¥Ä·¥Ñ…™·¥õy", 0, 100, 100, "", "%", new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                iconLayout.setAlpha((float) progress / 100.f);
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
                iconLayout.setVisibility(View.VISIBLE);
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                iconLayout.setVisibility(View.GONE);
            }
        });
        
        
        AddText(3, "Framerate:", 7.f, Color.BLACK);
        AddRadioButton(3, new String[]{"30Íú∞·¥©Íú±","45Íú∞·¥©Íú±","60Íú∞·¥©Íú±","90Íú∞·¥©Íú±"}, 1, new RadioGroup.OnCheckedChangeListener(){
                public void onCheckedChanged(RadioGroup radioGroup, int x) {

                }
            });
        
        AddCheckbox(Integer.valueOf(3), " Ä·¥áÍú±·¥á·¥õÍú± …¢·¥ú·¥áÍú±·¥õ", false, new CompoundButton.OnCheckedChangeListener() {
                public void onCheckedChanged(CompoundButton compoundButton, boolean isChecked) {
                    GetExecute("/reset.sh");
                }

                private void GetExecute(String —Ä0) {
                }
			});
        
        AddButton(3,"Clear Logs",ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT, 15, new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    String logsStr = "/UE4Game/ShadowTrackerExtra/ShadowTrackerExtra/Saved/Logs";
                    File logs = new File(getExternalFilesDir(null).getPath() + logsStr);
                    if (logs.isDirectory() && logs.exists() && logs != null){
                        delete(logs.toString());
                    }
                }

        private void delete(String toString)
        {
        }
            });
        
        
        AddButton(3, "Save Profile", ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT, 15, new View.OnClickListener() {
                public void onClick(View view) {
                    SaveConfiguration();
                    Toast.makeText(Floating.this, "Profile saved!", 1).show();
                }

                private void SaveConfiguration() {
                }
			});
        
    }

    private void AddText(int —Ä0, String —Ä1, int —Ä2, int —Ä3, String —Ä4) {
    }

    @SuppressLint("ClickableViewAccessibility")
    void CreateLayout() {
        mainLayoutParams = new WindowManager.LayoutParams(layoutWidth, layoutHeight, type, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS | WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, PixelFormat.RGBA_8888);

        mainLayoutParams.x = 0;
        mainLayoutParams.y = 0;
        mainLayoutParams.gravity = Gravity.START | Gravity.TOP;

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            mainLayoutParams.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
        }

        mainLayout = new LinearLayout(this);
        mainLayout.setOrientation(LinearLayout.VERTICAL);
        mainLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));

        GradientDrawable mainLayoutBg = new GradientDrawable();
        mainLayoutBg.setColor(0xFFFFFFFF);
        mainLayout.setBackground(mainLayoutBg);

        RelativeLayout headerLayout = new RelativeLayout(this);
        headerLayout.setLayoutParams(new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, menuButtonSize + convertSizeToDp(4)));
        headerLayout.setClickable(true);
        headerLayout.setFocusable(true);
        headerLayout.setFocusableInTouchMode(true);
        headerLayout.setBackgroundColor(Color.argb(255,211,211,211));
        mainLayout.addView(headerLayout);

        TextView textTitle = new TextView(this);
        textTitle.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT));
        textTitle.setGravity(Gravity.CENTER);
        textTitle.setClickable(true);
        textTitle.setFocusable(true);
        textTitle.setFocusableInTouchMode(true);
        textTitle.setText(" ·¥ç·¥Ä Ä·¥Ñ·¥úÍú±·¥Ñ ú·¥á·¥Ä·¥õ~·¥†…™·¥©");
        textTitle.setTextSize(convertSizeToDp(6.5f));
        textTitle.setTextColor(Color.BLACK);
        headerLayout.addView(textTitle);

        View.OnTouchListener onTitleListener = new View.OnTouchListener() {
            float pressedX;
            float pressedY;
            float deltaX;
            float deltaY;
            float newX;
            float newY;
            float maxX;
            float maxY;

            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getActionMasked()) {
                    case MotionEvent.ACTION_DOWN:

                        deltaX = mainLayoutParams.x - event.getRawX();
                        deltaY = mainLayoutParams.y - event.getRawY();

                        pressedX = event.getRawX();
                        pressedY = event.getRawY();

                        break;
                    case MotionEvent.ACTION_MOVE:
                        newX = event.getRawX() + deltaX;
                        newY = event.getRawY() + deltaY;

                        maxX = screenWidth - mainLayout.getWidth();
                        maxY = screenHeight - mainLayout.getHeight();

                        if (newX < 0)
                            newX = 0;
                        if (newX > maxX)
                            newX = (int) maxX;
                        if (newY < 0)
                            newY = 0;
                        if (newY > maxY)
                            newY = (int) maxY;

                        mainLayoutParams.x = (int) newX;
                        mainLayoutParams.y = (int) newY;
                        windowManager.updateViewLayout(mainLayout, mainLayoutParams);

                        break;

                    default:
                        break;
                }

                return false;
            }
        };

        headerLayout.setOnTouchListener(onTitleListener);
        textTitle.setOnTouchListener(onTitleListener);

        closeLayout = new RelativeLayout(this);
        closeLayoutParams = new RelativeLayout.LayoutParams(menuButtonSize, menuButtonSize);
        closeLayout.setLayoutParams(closeLayoutParams);
        closeLayout.setX(mainLayoutParams.width - closeLayoutParams.width - convertSizeToDp(2));
        closeLayout.setY(convertSizeToDp(2));
        closeLayout.setBackgroundColor(Color.argb(255, 0, 0, 0));
        headerLayout.addView(closeLayout);

        maximizeLayout = new RelativeLayout(this);
        maximizeLayoutParams = new RelativeLayout.LayoutParams(menuButtonSize, menuButtonSize);
        maximizeLayout.setLayoutParams(maximizeLayoutParams);
        maximizeLayout.setX(closeLayout.getX() - maximizeLayoutParams.width - convertSizeToDp(2));
        maximizeLayout.setY(convertSizeToDp(2));
        maximizeLayout.setBackgroundColor(Color.argb(255, 0, 0, 0));
        headerLayout.addView(maximizeLayout);

        minimizeLayout = new RelativeLayout(this);
        minimizeLayoutParams = new RelativeLayout.LayoutParams(menuButtonSize, menuButtonSize);
        minimizeLayout.setLayoutParams(minimizeLayoutParams);
        minimizeLayout.setX(maximizeLayout.getX() - minimizeLayoutParams.width - convertSizeToDp(2));
        minimizeLayout.setY(convertSizeToDp(2));
        minimizeLayout.setBackgroundColor(Color.argb(255, 0, 0, 0));
        headerLayout.addView(minimizeLayout);

        closeLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                AlertDialog.Builder builder = new AlertDialog.Builder(Floating.this, 5);
                builder.setTitle("Marcus Mod");
                builder.setMessage("Are you sure you want to stop the Hack?\nYou won't be to able access the Hack again until you re-open the Game!");
                builder.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        stopSelf();
                    }
                });
                builder.setNegativeButton("No", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });

                AlertDialog dialog = builder.create();
                dialog.getWindow().setType(type);
                dialog.show();
            }
        });

        maximizeLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                isMaximized = !isMaximized;

                if (isMaximized) {
                    lastMaximizedX = mainLayoutParams.x;
                    lastMaximizedY = mainLayoutParams.y;

                    lastMaximizedW = mainLayoutParams.width;
                    lastMaximizedH = mainLayoutParams.height;

                    mainLayoutParams.x = 0;
                    mainLayoutParams.y = 0;

                    mainLayoutParams.width = screenWidth;
                    mainLayoutParams.height = screenHeight;
                    windowManager.updateViewLayout(mainLayout, mainLayoutParams);

                    closeLayout.setX(mainLayoutParams.width - closeLayoutParams.width - (closeLayoutParams.width * 0.075f));
                    maximizeLayout.setX(closeLayout.getX() - maximizeLayoutParams.width - (maximizeLayoutParams.width * 0.075f));
                    minimizeLayout.setX(maximizeLayout.getX() - minimizeLayoutParams.width - (minimizeLayoutParams.width * 0.075f));
                } else {
                    mainLayoutParams.x = lastMaximizedX;
                    mainLayoutParams.y = lastMaximizedY;

                    mainLayoutParams.width = lastMaximizedW;
                    mainLayoutParams.height = lastMaximizedH;
                    windowManager.updateViewLayout(mainLayout, mainLayoutParams);

                    closeLayout.setX(mainLayoutParams.width - closeLayoutParams.width - (closeLayoutParams.width * 0.075f));
                    maximizeLayout.setX(closeLayout.getX() - maximizeLayoutParams.width - (maximizeLayoutParams.width * 0.075f));
                    minimizeLayout.setX(maximizeLayout.getX() - minimizeLayoutParams.width - (minimizeLayoutParams.width * 0.075f));
                }
            }
        });

        minimizeLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mainLayout.setVisibility(View.GONE);
                iconLayout.setVisibility(View.VISIBLE);
            }
        });

        TextView closeText = new TextView(this);
        closeText.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        closeText.setGravity(Gravity.CENTER);
        closeText.setText("‚úï");
        closeText.setTextSize(convertSizeToDp(mediumSize));
        closeText.setTextColor(Color.RED);
        closeLayout.addView(closeText);

        TextView maximizeText = new TextView(this);
        maximizeText.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        maximizeText.setGravity(Gravity.CENTER);
        maximizeText.setText("‚ñ°");
        maximizeText.setTextSize(convertSizeToDp(mediumSize));
        maximizeText.setTextColor(Color.RED);
        maximizeLayout.addView(maximizeText);

        TextView minimizeText = new TextView(this);
        minimizeText.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
        minimizeText.setGravity(Gravity.CENTER);
        minimizeText.setText("‚Äî");
        minimizeText.setTextSize(convertSizeToDp(mediumSize));
        minimizeText.setTextColor(Color.RED);
        minimizeLayout.addView(minimizeText);

        LinearLayout tabLayout = new LinearLayout(this);
        tabLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        tabLayout.setOrientation(LinearLayout.HORIZONTAL);

        HorizontalScrollView tabScrollView = new HorizontalScrollView(this);
        tabScrollView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        tabScrollView.setBackgroundColor(Color.argb(255, 0, 0, 0));

        tabScrollView.addView(tabLayout);

        mainLayout.addView(tabScrollView);

        final RelativeLayout[] tabButtons = new RelativeLayout[listTab.length];
        for (int i = 0; i < tabButtons.length; i++) {
            pageLayouts[i] = new LinearLayout(this);
            pageLayouts[i].setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
            pageLayouts[i].setOrientation(LinearLayout.VERTICAL);

            ScrollView scrollView = new ScrollView(this);
            scrollView.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
            scrollView.addView(pageLayouts[i]);

            tabButtons[i] = new RelativeLayout(this);
            tabButtons[i].setLayoutParams(new RelativeLayout.LayoutParams(tabWidth, tabHeight));
            if (i != 0) {
                tabButtons[i].setBackgroundColor(Color.argb(255, 0, 0, 0));
                pageLayouts[i].setVisibility(View.GONE);
            } else {
                tabButtons[i].setBackgroundColor(Color.RED);
                pageLayouts[i].setVisibility(View.VISIBLE);
            }

            TextView tabText = new TextView(this);
            tabText.setLayoutParams(new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
            tabText.setGravity(Gravity.CENTER);
            tabText.setText(listTab[i]);
            tabText.setTextSize(convertSizeToDp(4.0f));
            tabText.setTextColor(Color.WHITE);
            tabButtons[i].addView(tabText);

            final int curTab = i;
            tabButtons[i].setOnClickListener(new View.OnClickListener() {
					@Override
					public void onClick(View v) {
						if (curTab != lastSelectedPage) {
							tabButtons[curTab].setBackgroundColor(Color.RED);
							pageLayouts[curTab].setVisibility(View.VISIBLE);

							pageLayouts[lastSelectedPage].setVisibility(View.GONE);
							lastSelectedPage = curTab;

							for (int j = 0; j < tabButtons.length; j++) {
								if (j != curTab) {
									tabButtons[j].setBackgroundColor(Color.argb(255, 0, 0, 0));
								}
							}
						}
					}
				});

            tabLayout.addView(tabButtons[i]);
            mainLayout.addView(scrollView);
        }

        windowManager.addView(mainLayout, mainLayoutParams);

        AddFeatures();
    }


    @SuppressLint("ClickableViewAccessibility")
    void CreateIcon() {
        iconLayout = new RelativeLayout(this);
        RelativeLayout.LayoutParams iconParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        iconLayout.setLayoutParams(iconParams);

        iconImg = new ImageView(this);
        ViewGroup.LayoutParams iconImgParams = new ViewGroup.LayoutParams(150, 150);
        iconImg.setLayoutParams(iconImgParams);

        iconLayout.addView(iconImg);

        try {
            String iconBase64 = "";
            byte[] iconData = Base64.decode(iconBase64, Base64.DEFAULT);

            Bitmap bmp = BitmapFactory.decodeByteArray(iconData, 0, iconData.length);
            iconImg.setImageBitmap(bmp);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        iconLayoutParams = new WindowManager.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, type, WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS, PixelFormat.TRANSLUCENT);
        iconLayoutParams.gravity = Gravity.START | Gravity.TOP;

        iconLayoutParams.x = 0;
        iconLayoutParams.y = 0;

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            iconLayoutParams.layoutInDisplayCutoutMode = WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
        }

        iconLayout.setVisibility(View.GONE);

        iconLayout.setOnTouchListener(new View.OnTouchListener() {
            float pressedX;
            float pressedY;
            float deltaX;
            float deltaY;
            float newX;
            float newY;

            @Override
            public boolean onTouch(View v, MotionEvent event) {

                switch (event.getActionMasked()) {
                    case MotionEvent.ACTION_DOWN:

                        deltaX = iconLayoutParams.x - event.getRawX();
                        deltaY = iconLayoutParams.y - event.getRawY();

                        pressedX = event.getRawX();
                        pressedY = event.getRawY();

                        break;
                    case MotionEvent.ACTION_UP:
                        int Xdiff = (int) (event.getRawX() - pressedX);
                        int Ydiff = (int) (event.getRawY() - pressedY);

                        if (Xdiff == 0 && Ydiff == 0) {
                            mainLayout.setVisibility(View.VISIBLE);
                            iconLayout.setVisibility(View.GONE);
                        }
                        return true;
                    case MotionEvent.ACTION_MOVE:
                        newX = event.getRawX() + deltaX;
                        newY = event.getRawY() + deltaY;

                        float maxX = screenWidth - v.getWidth();
                        float maxY = screenHeight - v.getHeight();

                        if (newX < 0)
                            newX = 0;
                        if (newX > maxX)
                            newX = (int) maxX;
                        if (newY < 0)
                            newY = 0;
                        if (newY > maxY)
                            newY = (int) maxY;

                        iconLayoutParams.x = (int) newX;
                        iconLayoutParams.y = (int) newY;

                        windowManager.updateViewLayout(iconLayout, iconLayoutParams);
                        break;

                    default:
                        break;
                }

                return false;
            }
        });

        windowManager.addView(iconLayout, iconLayoutParams);
    }

    LinearLayout CreateHolder(Object data) {
        RelativeLayout parentHolder = new RelativeLayout(this);
        parentHolder.setLayoutParams(new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        LinearLayout childHolder = new LinearLayout(this);
        childHolder.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        childHolder.setOrientation(LinearLayout.HORIZONTAL);
        parentHolder.addView(childHolder);

        if (data instanceof Integer)
            pageLayouts[(Integer) data].addView(parentHolder);
        else if (data instanceof ViewGroup)
            ((ViewGroup) data).addView(parentHolder);

        return childHolder;
    }

    void AddText(Object data, String text, float size, int color) {
        TextView textView = new TextView(this);
        textView.setText(text);
        textView.setTextColor(color);
        textView.setPadding(15, 15, 15, 15);
        textView.setTextSize(convertSizeToDp(size));
        textView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        if (data instanceof Integer)
            pageLayouts[(Integer) data].addView(textView);
        else if (data instanceof ViewGroup)
            ((ViewGroup) data).addView(textView);
    }

    void AddCenteredText(Object data, String text, int size, int typeface, String color) {
        TextView textView = new TextView(this);
        textView.setText(text);
        textView.setTextColor(Color.parseColor(color));
        textView.setTypeface(null, typeface);
        textView.setPadding(15, 15, 15, 15);
        textView.setTextSize(convertSizeToDp(size));
        textView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        textView.setGravity(Gravity.CENTER);

        if (data instanceof Integer)
            pageLayouts[(Integer) data].addView(textView);
        else if (data instanceof ViewGroup)
            ((ViewGroup) data).addView(textView);
    }

    void AddHeader(Object data, String text) {
        LinearLayout headerLayout = new LinearLayout(this);
        headerLayout.setLayoutParams(new WindowManager.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        headerLayout.setOrientation(LinearLayout.VERTICAL);
        headerLayout.setBackgroundColor(Color.argb(255, 0, 0, 1));

        TextView textView = new TextView(this);
        textView.setText(text);
        textView.setTextColor(Color.BLACK);
        textView.setTypeface(null, Typeface.BOLD);
        textView.setPadding(15, 15, 15, 15);
        textView.setTextSize(convertSizeToDp(12.5f));
        textView.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        headerLayout.addView(textView);

        if (data instanceof Integer)
            pageLayouts[(Integer) data].addView(headerLayout);
        else if (data instanceof ViewGroup)
            ((ViewGroup) data).addView(headerLayout);
    }

    void AddCheckbox(Object data, String text, boolean checked, CompoundButton.OnCheckedChangeListener listener) {
        CheckBox checkBox = new CheckBox(this);
        checkBox.setText(text);
        checkBox.setTextSize(convertSizeToDp(4.f));
        checkBox.setTextColor(Color.BLACK);
        checkBox.setChecked(checked);
        checkBox.setOnCheckedChangeListener(listener);
        checkBox.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        if (Build.VERSION.SDK_INT >= 21) {
            ColorStateList colorStateList = new ColorStateList(
                    new int[][]{
                            new int[]{-android.R.attr.state_checked}, // unchecked
                            new int[]{android.R.attr.state_checked}  // checked
                    },
                    new int[]{
                    Color.BLACK,
                    Color.BLACK
                    }
            );
            checkBox.setButtonTintList(colorStateList);
        }

        if (data instanceof Integer)
            pageLayouts[(Integer) data].addView(checkBox);
        else if (data instanceof ViewGroup)
            ((ViewGroup) data).addView(checkBox);
    }

    void AddSwitch(Object data, String text, boolean checked, CompoundButton.OnCheckedChangeListener listener) {
        Switch toggle = new Switch(this);
        toggle.setText(text);
        toggle.setTextSize(convertSizeToDp(mediumSize));
        toggle.setTextColor(Color.BLACK);
        toggle.setChecked(checked);
        toggle.setPadding(15, 15, 15, 15);
        toggle.setOnCheckedChangeListener(listener);
        toggle.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));

        if (Build.VERSION.SDK_INT >= 21) {
            ColorStateList colorStateList = new ColorStateList(
                    new int[][]{
                            new int[]{-android.R.attr.state_checked}, // unchecked
                            new int[]{android.R.attr.state_checked}  // checked
                    },
                    new int[]{
                    Color.BLACK,
                    Color.BLACK
                    }
            );
            toggle.setButtonTintList(colorStateList);
        }

        if (data instanceof Integer)
            pageLayouts[(Integer) data].addView(toggle);
        else if (data instanceof ViewGroup)
            ((ViewGroup) data).addView(toggle);
    }

    void AddSeekbar(Object data, String text, int min, int max, int value, final String prefix, final String suffix, final SeekBar.OnSeekBarChangeListener listener) {
        LinearLayout linearLayout = new LinearLayout(this);
        linearLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        linearLayout.setOrientation(LinearLayout.HORIZONTAL);

        TextView textV = new TextView(this);
        textV.setText(text + ":");
        textV.setTextSize(convertSizeToDp(mediumSize));
        textV.setPadding(15, 15, 15, 15);
        textV.setTextColor(Color.BLACK);
        textV.setLayoutParams(new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        textV.setGravity(Gravity.LEFT);

        SeekBar seekBar = new SeekBar(this);
        seekBar.setMax(max);
        if (Build.VERSION.SDK_INT >= 26) {
            seekBar.setMin(min);
            seekBar.setProgress(min);
        }
        if (Build.VERSION.SDK_INT >= 21) {
            seekBar.setThumbTintList(ColorStateList.valueOf(Color.BLACK));
            seekBar.setProgressTintList(ColorStateList.valueOf(Color.BLACK));
        }
        seekBar.setPadding(20, 15, 20, 15);

        final TextView textValue = new TextView(this);
        textValue.setText(prefix + min + suffix);
        textValue.setGravity(Gravity.RIGHT);
        textValue.setTextSize(convertSizeToDp(mediumSize));
        textValue.setLayoutParams(new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        textValue.setPadding(20, 15, 20, 15);
        textValue.setTextColor(Color.BLACK);

        final int minimValue = min;
        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if (progress < minimValue) {
                    progress = minimValue;
                    seekBar.setProgress(progress);
                }

                if (listener != null) listener.onProgressChanged(seekBar, progress, fromUser);
                textValue.setText(prefix + progress + suffix);
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
                if (listener != null) listener.onStartTrackingTouch(seekBar);
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                if (listener != null) listener.onStopTrackingTouch(seekBar);
            }
        });

        if (value != 0) {
            if (value < min)
                value = min;
            if (value > max)
                value = max;

            textValue.setText(prefix + value + suffix);
            seekBar.setProgress(value);
        }

        linearLayout.addView(textV);
        linearLayout.addView(textValue);

        if (data instanceof Integer) {
            pageLayouts[(Integer) data].addView(linearLayout);
            pageLayouts[(Integer) data].addView(seekBar);
        } else if (data instanceof ViewGroup) {
            ((ViewGroup) data).addView(linearLayout);
            ((ViewGroup) data).addView(seekBar);
        }
    }

    void AddRadioButton(Object data, String[] list, int defaultCheckedId, RadioGroup.OnCheckedChangeListener listener) {
        RadioGroup rg = new RadioGroup(this);
        RadioButton[] rb = new RadioButton[list.length];
        rg.setOrientation(RadioGroup.VERTICAL);
        for (int i = 0; i < list.length; i++) {
            rb[i] = new RadioButton(this);
            if (i == defaultCheckedId) rb[i].setChecked(true);
            rb[i].setPadding(15, 15, 15, 15);
            rb[i].setText(list[i]);
            rb[i].setTextSize(convertSizeToDp(mediumSize));
            rb[i].setId(i);
            rb[i].setGravity(Gravity.RIGHT);
            rb[i].setTextColor(Color.BLACK);

            rg.addView(rb[i]);
        }
        rg.setOnCheckedChangeListener(listener);
        RelativeLayout.LayoutParams toggleP = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        rg.setLayoutParams(toggleP);

        if (data instanceof Integer)
            pageLayouts[(Integer) data].addView(rg);
        else if (data instanceof ViewGroup)
            ((ViewGroup) data).addView(rg);
    }

    void AddDropdown(Object data, String[] list, AdapterView.OnItemSelectedListener listener) {
        LinearLayout holderLayout = new LinearLayout(this);
        holderLayout.setOrientation(LinearLayout.VERTICAL);
        holderLayout.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        holderLayout.setPadding(15, 15, 15, 15);
        holderLayout.setGravity(Gravity.CENTER);

        Spinner sp = new Spinner(this, Spinner.MODE_DROPDOWN);

        GradientDrawable drawable = new GradientDrawable();
        drawable.setColor(Color.argb(255, 233, 233, 233));
        drawable.setStroke(1, Color.BLACK);
        sp.setPopupBackgroundDrawable(drawable);
        sp.setBackground(drawable);

        sp.setLayoutParams(new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
        ArrayAdapter<String> dataAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_spinner_item, list) {
            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                View v = super.getView(position, convertView, parent);

                ((TextView) v).setTextColor(Color.WHITE);
                ((TextView) v).setTypeface(null, Typeface.BOLD);
                ((TextView) v).setGravity(Gravity.CENTER);

                return v;
            }

            @Override
            public View getDropDownView(int position, View convertView, ViewGroup parent) {
                View v = super.getDropDownView(position, convertView, parent);

                ((TextView) v).setTextColor(Color.WHITE);
                ((TextView) v).setTypeface(null, Typeface.BOLD);
                ((TextView) v).setGravity(Gravity.CENTER);

                return v;
            }
        };
        dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        sp.setAdapter(dataAdapter);
        sp.setOnItemSelectedListener(listener);
        sp.setPadding(0, 5, 0, 5);

        holderLayout.addView(sp);

        if (data instanceof Integer)
            pageLayouts[(Integer) data].addView(holderLayout);
        else if (data instanceof ViewGroup)
            ((ViewGroup) data).addView(holderLayout);
    }

    void AddButton(Object data, String text, int width, int height, int padding, View.OnClickListener listener) {
        LinearLayout holderLayout = new LinearLayout(this);
        holderLayout.setOrientation(LinearLayout.VERTICAL);
        holderLayout.setLayoutParams(new LinearLayout.LayoutParams(width, height));
        holderLayout.setPadding(padding, padding, padding, padding);
        holderLayout.setGravity(Gravity.CENTER);

        Button btn = new Button(this);
        btn.setText(text);
        btn.setTextColor(Color.BLACK);
        btn.setOnClickListener(listener);
        btn.setLayoutParams(new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));

        GradientDrawable drawable = new GradientDrawable();
        drawable.setColor(Color.argb(255, 244, 244, 244));
        drawable.setStroke(2, Color.argb(255, 0, 0, 0));

        btn.setBackground(drawable);

        holderLayout.addView(btn);

        if (data instanceof Integer)
            pageLayouts[(Integer) data].addView(holderLayout);
        else if (data instanceof ViewGroup)
            ((ViewGroup) data).addView(holderLayout);
    }

    float convertSizeToDp(float size) {
        return size * density;
    }

    int convertSizeToDp(int size) {
        return (int) (size * density);
    }

    @SuppressLint("HandlerLeak")
    Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            if (msg.what == 0) {
                try {
                    Point screenSize = new Point();
                    Display display = windowManager.getDefaultDisplay();
                    display.getRealSize(screenSize);

                    screenWidth = screenSize.x;
                    screenHeight = screenSize.y;

                    mainLayoutParams.width = layoutWidth;
                    mainLayoutParams.height = layoutHeight;
                    windowManager.updateViewLayout(mainLayout, mainLayoutParams);

                    canvasLayoutParams.width = screenWidth;
                    canvasLayoutParams.height = screenHeight;
                    windowManager.updateViewLayout(canvasLayout, canvasLayoutParams);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    };

    Thread mUpdateCanvas = new Thread() {
        @Override
        public void run() {
            android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_DISPLAY);
            while (isAlive() && !isInterrupted()) {
                try {
                    long t1 = System.currentTimeMillis();
                    canvasLayout.postInvalidate();
                    long td = System.currentTimeMillis() - t1;
                    Thread.sleep(Math.max(Math.min(0, sleepTime - td), sleepTime));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    };

    Thread mUpdateThread = new Thread() {
        @Override
        public void run() {
            android.os.Process.setThreadPriority(android.os.Process.THREAD_PRIORITY_DISPLAY);
            while (isAlive() && !isInterrupted()) {
                try {
                    long t1 = System.currentTimeMillis();
                    Point screenSize = new Point();
                    Display display = windowManager.getDefaultDisplay();
                    display.getRealSize(screenSize);

                    if (screenWidth != screenSize.x || screenHeight != screenSize.y) {
                        handler.sendEmptyMessage(0);
                    }

                    long td = System.currentTimeMillis() - t1;
                    Thread.sleep(Math.max(Math.min(0, sleepTime - td), sleepTime));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    };
}
