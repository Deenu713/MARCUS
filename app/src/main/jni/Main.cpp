//   <<-- Headers Generated By MarcusCheaT on 10/10/2021 18:44  IST -->
#include "Includes.h"
#include "PUBGM.h"

#include <Includes/Utils.h>
#if defined(__aarch64__)
#include <Substrate/And64InlineHook.hpp>
#else
#include <Substrate/SubstrateHook.h>
#include <Substrate/CydiaSubstrate.h>
#endif
#include "KittyMemory/MemoryPatch.h"
#include "Includes/Logger.h"
struct Patch {
    MemoryPatch Bypass,Bypass1,Bypass2,Bypass3,Bypass4,Bypass5,Bypass6,Bypass7,Bypass8,Bypass9,Bypass10,Bypass11,Bypass12,Bypass13,Bypass14,Bypass15,Bypass16,Bypass17,Bypass18,Bypass19,Bypass20,Bypass21,Bypass22,Bypass23,Bypass24,Bypass25,Bypass26,Bypass27,Bypass28,Bypass29,Bypass30,Bypass31,Bypass32,Bypass33,Bypass34,Bypass35,Bypass36,Bypass37,Bypass38,Bypass39,Bypass40,Bypass41,Bypass42,Bypass43,Bypass44,Bypass45,Bypass46,Bypass47,Bypass48,Bypass49,Bypass50,Bypass51,Bypass52,Bypass53,Bypass54,Bypass55,Bypass56,Bypass57,Bypass58,Bypass59,Bypass60,Bypass61,Bypass62,Bypass63,Bypass64,Bypass65,Bypass66,Bypass67,Bypass68,Bypass69,Bypass70,Bypass71,Bypass72,Bypass73,Bypass74,Bypass75,Bypass76,Bypass77,Bypass78,Bypass79,Bypass80,Bypass81,Bypass82,Bypass83,Bypass84,Bypass85,Bypass86,Bypass87,Bypass88,Bypass89,Bypass90,Bypass91,Bypass92,Bypass93,Bypass94,Bypass95,Bypass96,Bypass97,Bypass98,Bypass99,Bypass100,Bypass101,Bypass102,Bypass103,Bypass104,Bypass105,Bypass106,Bypass107,Bypass108,Bypass109,Bypass110,Bypass111,Bypass112,Bypass113,Bypass114,Bypass115,Bypass116,Bypass117,Bypass118,Bypass119,Bypass120,Bypass121,Bypass122,Bypass123,Bypass124,Bypass125,Bypass126,Bypass127,Bypass128,Bypass129,Bypass130,Bypass131,Bypass132,Bypass133,Bypass134,Bypass135,Bypass136,Bypass137,Bypass138,Bypass139,Bypass140,Bypass141,Bypass142,Bypass143,Bypass144,Bypass145,Bypass146,Bypass147,Bypass148,Bypass149,Bypass150,Bypass151,Bypass152,Bypass153,Bypass154,Bypass155,Bypass156,Bypass157,Bypass158,Bypass159,Bypass160,Bypass161,Bypass162,Bypass163,Bypass164,Bypass165,Bypass166,Bypass167,Bypass168,Bypass169,Bypass170,Bypass171,Bypass172,Bypass173,Bypass174,Bypass175,Bypass176,Bypass177,Bypass178,Bypass179,Bypass180,Bypass181,Bypass182,Bypass183,Bypass184,Bypass185,Bypass186,Bypass187,Bypass188,Bypass189,Bypass190,Bypass191,Bypass192,Bypass193,Bypass194,Bypass195,Bypass196,Bypass197,Bypass198,Bypass199,Bypass200,Bypass201,Bypass202,Bypass203,Bypass204,Bypass205,Bypass206,Bypass207,Bypass208,Bypass209,Bypass210,Bypass211,Bypass212,Bypass213,Bypass214,Bypass215,Bypass216,Bypass217,Bypass218,Bypass219,Bypass220,Bypass221,Bypass222,Bypass223,Bypass224,Bypass225,Bypass226,Bypass227,Bypass228,Bypass229,Bypass230,Bypass231,Bypass232,Bypass233,Bypass234,Bypass235,Bypass236,Bypass237,Bypass238,Bypass239,Bypass240,Bypass241,Bypass242,Bypass243,Bypass244,Bypass245,Bypass246,Bypass247,Bypass248,Bypass249,Bypass250,Bypass251,Bypass252,Bypass253,Bypass254,Bypass255,Bypass256,Bypass257,Bypass258,Bypass259,Bypass260,Bypass261,Bypass262,Bypass263,Bypass264,Bypass265,Bypass266,Bypass267,Bypass268,Bypass269,Bypass270,Bypass271,Bypass272,Bypass273,Bypass274,Bypass275,Bypass276,Bypass277,Bypass278,Bypass279,Bypass280,Bypass281,Bypass282,Bypass283,Bypass284,Bypass285,Bypass286,Bypass287,Bypass288,Bypass289,Bypass290,Bypass291,Bypass292,Bypass293,Bypass294,Bypass295,Bypass296,Bypass297,Bypass298,Bypass299,Bypass300,Bypass301,Bypass302,Bypass303,Bypass304,Bypass305,Bypass306,Bypass307,Bypass308,Bypass309,Bypass310,Bypass311,Bypass312,Bypass313,Bypass314,Bypass315,Bypass316,Bypass317,Bypass318,Bypass319,Bypass320,Bypass321,Bypass322,Bypass323,Bypass324,Bypass325,Bypass326,Bypass327,Bypass328,Bypass329,Bypass330,Bypass331,Bypass332,Bypass333,Bypass334,Bypass335,Bypass336,Bypass337,Bypass338,Bypass339,Bypass340,Bypass341,Bypass342,Bypass343,Bypass344,Bypass345,Bypass346,Bypass347,Bypass348,Bypass349,Bypass350,Bypass351,Bypass352,Bypass353,Bypass354,Bypass355,Bypass356,Bypass357,Bypass358,Bypass359,Bypass360,Bypass361,Bypass362,Bypass363,Bypass364,Bypass365,Bypass366,Bypass367,Bypass368,Bypass369,Bypass370,Bypass371,Bypass372,Bypass373,Bypass374,Bypass375,Bypass376,Bypass377,Bypass378,Bypass379,Bypass380,Bypass381,Bypass382,Bypass383,Bypass384,Bypass385,Bypass386,Bypass387,Bypass388,Bypass389,Bypass390,Bypass391,Bypass392,Bypass393,Bypass394,Bypass395,Bypass396,
    Bypass397,
    Bypass398,
    Bypass399,
    Bypass400,
    
    

Hit,
Noshake,
Noshake1,
Lesscoil,
Blackbody,
Blacksky,
Aimbot1,
Aimbot2,
Speedcar,
Carjump,
Longjump,
Flash,
Statuemode,
Nofog,
Darkmode,
Desertmap,
Notree,
Fixstuck,
Slowmotion,
Antipull,
WallLoot,
Maggic,
Speedrun,
Standscope,
Pronescope,
Knockspeed,
Xhit,
Autodrive,
Wallshot1,
Wallshot2,
Wallshot3,
Redfog1,
Redfog2,
Blackfog1,
Blackfog2,
Blackfog3,
Greenfog1,
Greenfog2,
Darkbluefog1,
Darkbluefog2,
Cyanfog,
Purplefog,
Litegreenfog,
Aim1,
Aim2,
Aim3,
Aim4,
Aim5,
Aim6,
Aim7,
Aim8,
Aim9,
Aim10,
Aim11,
Aim12,
Aim13
 ;   
    
    
} MarcusVip;
bool isbypass = true,
Hit =false,
Noshake = false,
Lesscoil = false,
Blackbody = false,
Blacksky = false,
Nofog = false,
Aimbot = false,
Speedcar = false,
Carjump = false,
Flash = false,
Statuemode = false,
Longjump = false,
Darkmode = false,
Desertmap = false,
Notree = false,
Fixstuck = false,
Slowmotion = false,
Antipull = false,
WallLoot = false,
Maggic = false,
Speedrun = false,
Standscope = false,
Pronescope = false,
Knockspeed = false,
Xhit = false,
Autodrive = false,
Wallshot = false,
Redfog = false,
Blackfog = false,
Greenfog = false,
Darkbluefog = false,
Cyanfog = false,
Purplefog = false,
Litegreenfog = false,
Aim = false,
featureHookToggle = true;



void native_onSendConfig(JNIEnv *env, jobject thiz, jstring s, jstring v) {
    const char *config = env->GetStringUTFChars(s, 0);
    const char *value = env->GetStringUTFChars(v, 0);

    if (!strcmp(config, "CMD_PARSE_ITEMS")) {
        itemData = json::parse(value);
    } else if (!strcmp(config, "ESP::ITEMS")) {
        u_long itemId = strtoul(value, 0, 0);
        itemConfig[itemId] = !itemConfig[itemId];
    } else {
        Config[config] = (u_long) strtoul(value, 0, 0);
    }
}

jclass (*orig_FindClass)(JNIEnv *env, const char *name);

int Register2(JNIEnv *env) {
    JNINativeMethod methods[] = {{"Init",  "(Landroid/content/Context;)V",                   (void *) native_Init}};
// Service Launcher By MarcusCheaT
    jclass clazz = env->FindClass("com/MarcusCheaT/Launcher");
    if (!clazz)
        return -1;

    if (env->RegisterNatives(clazz, methods, sizeof(methods) / sizeof(methods[0])) != 0)
        return -1;

    return 0;
}

jclass hkFindClass(JNIEnv *env, const char *name) {
 //   <<-- Classes Added By MarcusCheaT to Kill Signature Verification -->
    if (!strcmp(name, "arm/ArmKill") ||
             !strcmp(name, "MarcusCheaT/MarcusCheaT") ||
            !strcmp(name, "com/MarcusCheaT/Floating") ||
             !strcmp(name, "RSH/RSHPrime") ||
              !strcmp(name, "NP/NP Sign") ||
               !strcmp(name, "MarcusCheaT/Lund.apk") ||
                  !strcmp(name, "MarcusCheaT/Hook.apk") ||
            !strcmp(name, "com/MarcusCheaT/Launcher") ||
            !strcmp(name, "com/MarcusCheaT/MainActivity")) {
        LOGI("FindClass: %s", name);
        return 0;
    }
    return orig_FindClass(env, name);
}



void native_onSwitch(JNIEnv*, jclass clazz, int code, jboolean jboolean1)
{
    switch ((int) code) {
        case 1:
            isbypass = jboolean1;
            if (isbypass) {
MarcusVip.Bypass.Modify();
MarcusVip.Bypass1.Modify();
MarcusVip.Bypass2.Modify();
MarcusVip.Bypass3.Modify();
MarcusVip.Bypass4.Modify();
MarcusVip.Bypass5.Modify();
MarcusVip.Bypass6.Modify();
MarcusVip.Bypass7.Modify();
MarcusVip.Bypass8.Modify();
MarcusVip.Bypass9.Modify();
MarcusVip.Bypass10.Modify();
MarcusVip.Bypass11.Modify();
MarcusVip.Bypass12.Modify();
MarcusVip.Bypass13.Modify();
MarcusVip.Bypass14.Modify();
MarcusVip.Bypass15.Modify();
MarcusVip.Bypass16.Modify();
MarcusVip.Bypass17.Modify();
MarcusVip.Bypass18.Modify();
MarcusVip.Bypass19.Modify();
MarcusVip.Bypass20.Modify();
MarcusVip.Bypass21.Modify();
MarcusVip.Bypass22.Modify();
MarcusVip.Bypass23.Modify();
MarcusVip.Bypass24.Modify();
MarcusVip.Bypass25.Modify();
MarcusVip.Bypass26.Modify();
MarcusVip.Bypass27.Modify();
MarcusVip.Bypass28.Modify();
MarcusVip.Bypass29.Modify();
MarcusVip.Bypass30.Modify();
MarcusVip.Bypass31.Modify();
MarcusVip.Bypass32.Modify();
MarcusVip.Bypass33.Modify();
MarcusVip.Bypass34.Modify();
MarcusVip.Bypass35.Modify();
MarcusVip.Bypass36.Modify();
MarcusVip.Bypass37.Modify();
MarcusVip.Bypass38.Modify();
MarcusVip.Bypass39.Modify();
MarcusVip.Bypass40.Modify();
MarcusVip.Bypass41.Modify();
MarcusVip.Bypass42.Modify();
MarcusVip.Bypass43.Modify();
MarcusVip.Bypass44.Modify();
MarcusVip.Bypass45.Modify();
MarcusVip.Bypass46.Modify();
MarcusVip.Bypass47.Modify();
MarcusVip.Bypass48.Modify();
MarcusVip.Bypass49.Modify();
MarcusVip.Bypass50.Modify();
MarcusVip.Bypass51.Modify();
MarcusVip.Bypass52.Modify();
MarcusVip.Bypass53.Modify();
MarcusVip.Bypass54.Modify();
MarcusVip.Bypass55.Modify();
MarcusVip.Bypass56.Modify();
MarcusVip.Bypass57.Modify();
MarcusVip.Bypass58.Modify();
MarcusVip.Bypass59.Modify();
MarcusVip.Bypass60.Modify();
MarcusVip.Bypass61.Modify();
MarcusVip.Bypass62.Modify();
MarcusVip.Bypass63.Modify();
MarcusVip.Bypass64.Modify();
MarcusVip.Bypass65.Modify();
MarcusVip.Bypass66.Modify();
MarcusVip.Bypass67.Modify();
MarcusVip.Bypass68.Modify();
MarcusVip.Bypass69.Modify();
MarcusVip.Bypass70.Modify();
MarcusVip.Bypass71.Modify();
MarcusVip.Bypass72.Modify();
MarcusVip.Bypass73.Modify();
MarcusVip.Bypass74.Modify();
MarcusVip.Bypass75.Modify();
MarcusVip.Bypass76.Modify();
MarcusVip.Bypass77.Modify();
MarcusVip.Bypass78.Modify();
MarcusVip.Bypass79.Modify();
MarcusVip.Bypass80.Modify();
MarcusVip.Bypass81.Modify();
MarcusVip.Bypass82.Modify();
MarcusVip.Bypass83.Modify();
MarcusVip.Bypass84.Modify();
MarcusVip.Bypass85.Modify();
MarcusVip.Bypass86.Modify();
MarcusVip.Bypass87.Modify();
MarcusVip.Bypass88.Modify();
MarcusVip.Bypass89.Modify();
MarcusVip.Bypass90.Modify();
MarcusVip.Bypass91.Modify();
MarcusVip.Bypass92.Modify();
MarcusVip.Bypass93.Modify();
MarcusVip.Bypass94.Modify();
MarcusVip.Bypass95.Modify();
MarcusVip.Bypass96.Modify();
MarcusVip.Bypass97.Modify();
MarcusVip.Bypass98.Modify();
MarcusVip.Bypass99.Modify();
MarcusVip.Bypass100.Modify();
MarcusVip.Bypass101.Modify();
MarcusVip.Bypass102.Modify();
MarcusVip.Bypass103.Modify();
MarcusVip.Bypass104.Modify();
MarcusVip.Bypass105.Modify();
MarcusVip.Bypass106.Modify();
MarcusVip.Bypass107.Modify();
MarcusVip.Bypass108.Modify();
MarcusVip.Bypass109.Modify();
MarcusVip.Bypass110.Modify();
MarcusVip.Bypass111.Modify();
MarcusVip.Bypass112.Modify();
MarcusVip.Bypass113.Modify();
MarcusVip.Bypass114.Modify();
MarcusVip.Bypass115.Modify();
MarcusVip.Bypass116.Modify();
MarcusVip.Bypass117.Modify();
MarcusVip.Bypass118.Modify();
MarcusVip.Bypass119.Modify();
MarcusVip.Bypass120.Modify();
MarcusVip.Bypass121.Modify();
MarcusVip.Bypass122.Modify();
MarcusVip.Bypass123.Modify();
MarcusVip.Bypass124.Modify();
MarcusVip.Bypass125.Modify();
MarcusVip.Bypass126.Modify();
MarcusVip.Bypass127.Modify();
MarcusVip.Bypass128.Modify();
MarcusVip.Bypass129.Modify();
MarcusVip.Bypass130.Modify();
MarcusVip.Bypass131.Modify();
MarcusVip.Bypass132.Modify();
MarcusVip.Bypass133.Modify();
MarcusVip.Bypass134.Modify();
MarcusVip.Bypass135.Modify();
MarcusVip.Bypass136.Modify();
MarcusVip.Bypass137.Modify();
MarcusVip.Bypass138.Modify();
MarcusVip.Bypass139.Modify();
MarcusVip.Bypass140.Modify();
MarcusVip.Bypass141.Modify();
MarcusVip.Bypass142.Modify();
MarcusVip.Bypass143.Modify();
MarcusVip.Bypass144.Modify();
MarcusVip.Bypass145.Modify();
MarcusVip.Bypass146.Modify();
MarcusVip.Bypass147.Modify();
MarcusVip.Bypass148.Modify();
MarcusVip.Bypass149.Modify();
MarcusVip.Bypass150.Modify();
MarcusVip.Bypass151.Modify();
MarcusVip.Bypass152.Modify();
MarcusVip.Bypass153.Modify();
MarcusVip.Bypass154.Modify();
MarcusVip.Bypass155.Modify();
MarcusVip.Bypass156.Modify();
MarcusVip.Bypass157.Modify();
MarcusVip.Bypass158.Modify();
MarcusVip.Bypass159.Modify();
MarcusVip.Bypass160.Modify();
MarcusVip.Bypass161.Modify();
MarcusVip.Bypass162.Modify();
MarcusVip.Bypass163.Modify();
MarcusVip.Bypass164.Modify();
MarcusVip.Bypass165.Modify();
MarcusVip.Bypass166.Modify();
MarcusVip.Bypass167.Modify();
MarcusVip.Bypass168.Modify();
MarcusVip.Bypass169.Modify();
MarcusVip.Bypass170.Modify();
MarcusVip.Bypass171.Modify();
MarcusVip.Bypass172.Modify();
MarcusVip.Bypass173.Modify();
MarcusVip.Bypass174.Modify();
MarcusVip.Bypass175.Modify();
MarcusVip.Bypass176.Modify();
MarcusVip.Bypass177.Modify();
MarcusVip.Bypass178.Modify();
MarcusVip.Bypass179.Modify();
MarcusVip.Bypass180.Modify();
MarcusVip.Bypass181.Modify();
MarcusVip.Bypass182.Modify();
         MarcusVip.Bypass183.Modify();
         MarcusVip.Bypass184.Modify();   
         MarcusVip.Bypass186.Modify();
         MarcusVip.Bypass187.Modify();
         MarcusVip.Bypass188.Modify();
         MarcusVip.Bypass189.Modify();
         MarcusVip.Bypass190.Modify();
         MarcusVip.Bypass191.Modify();
         MarcusVip.Bypass192.Modify();
         MarcusVip.Bypass193.Modify();
         MarcusVip.Bypass194.Modify();
         MarcusVip.Bypass195.Modify();
         MarcusVip.Bypass196.Modify();
         MarcusVip.Bypass197.Modify();
         MarcusVip.Bypass198.Modify();
         MarcusVip.Bypass199.Modify();   
         MarcusVip.Bypass200.Modify(); 
                MarcusVip.Bypass201.Modify();
                MarcusVip.Bypass202.Modify();
                MarcusVip.Bypass203.Modify();
                MarcusVip.Bypass204.Modify();
                MarcusVip.Bypass205.Modify();
                MarcusVip.Bypass206.Modify();
                MarcusVip.Bypass207.Modify();
                MarcusVip.Bypass208.Modify();
                MarcusVip.Bypass209.Modify();
                MarcusVip.Bypass210.Modify();
                MarcusVip.Bypass211.Modify();
                MarcusVip.Bypass212.Modify();
                MarcusVip.Bypass213.Modify();
                MarcusVip.Bypass214.Modify();
                MarcusVip.Bypass215.Modify();
                MarcusVip.Bypass216.Modify();
                MarcusVip.Bypass217.Modify();
                MarcusVip.Bypass218.Modify();
                MarcusVip.Bypass219.Modify();
                MarcusVip.Bypass220.Modify();
                MarcusVip.Bypass221.Modify();
                MarcusVip.Bypass222.Modify();
                MarcusVip.Bypass223.Modify();
                MarcusVip.Bypass224.Modify();
                MarcusVip.Bypass225.Modify();
                MarcusVip.Bypass226.Modify();
                MarcusVip.Bypass227.Modify();
                MarcusVip.Bypass228.Modify();
                MarcusVip.Bypass229.Modify();
                MarcusVip.Bypass230.Modify();
                MarcusVip.Bypass231.Modify();
                MarcusVip.Bypass232.Modify();
                MarcusVip.Bypass233.Modify();
                MarcusVip.Bypass234.Modify();
                MarcusVip.Bypass235.Modify();
                MarcusVip.Bypass236.Modify();
                MarcusVip.Bypass237.Modify();
                MarcusVip.Bypass238.Modify();
                MarcusVip.Bypass239.Modify();
                MarcusVip.Bypass240.Modify();
                MarcusVip.Bypass241.Modify();
                MarcusVip.Bypass242.Modify();
                MarcusVip.Bypass243.Modify();
                MarcusVip.Bypass244.Modify();
                MarcusVip.Bypass245.Modify();
                MarcusVip.Bypass246.Modify();
                MarcusVip.Bypass247.Modify();
                MarcusVip.Bypass248.Modify();
                MarcusVip.Bypass249.Modify();
                MarcusVip.Bypass250.Modify();
                MarcusVip.Bypass251.Modify();
MarcusVip.Bypass252.Modify();
MarcusVip.Bypass253.Modify();
MarcusVip.Bypass254.Modify();
MarcusVip.Bypass255.Modify();
MarcusVip.Bypass256.Modify();
MarcusVip.Bypass257.Modify();
MarcusVip.Bypass258.Modify();
MarcusVip.Bypass259.Modify();
MarcusVip.Bypass260.Modify();
MarcusVip.Bypass261.Modify();
MarcusVip.Bypass262.Modify();
MarcusVip.Bypass263.Modify();
MarcusVip.Bypass264.Modify();
MarcusVip.Bypass265.Modify();
MarcusVip.Bypass266.Modify();
MarcusVip.Bypass267.Modify();
MarcusVip.Bypass268.Modify();
MarcusVip.Bypass269.Modify();
MarcusVip.Bypass270.Modify();
MarcusVip.Bypass271.Modify();
MarcusVip.Bypass272.Modify();
MarcusVip.Bypass273.Modify();
MarcusVip.Bypass274.Modify();
MarcusVip.Bypass275.Modify();
MarcusVip.Bypass276.Modify();
MarcusVip.Bypass277.Modify();
MarcusVip.Bypass278.Modify();
MarcusVip.Bypass279.Modify();
MarcusVip.Bypass280.Modify();
MarcusVip.Bypass281.Modify();
MarcusVip.Bypass282.Modify();
MarcusVip.Bypass283.Modify();
MarcusVip.Bypass284.Modify();
MarcusVip.Bypass285.Modify();
MarcusVip.Bypass286.Modify();
MarcusVip.Bypass287.Modify();
MarcusVip.Bypass288.Modify();
MarcusVip.Bypass289.Modify();
MarcusVip.Bypass290.Modify();
MarcusVip.Bypass291.Modify();
MarcusVip.Bypass292.Modify();
         MarcusVip.Bypass293.Modify();
         MarcusVip.Bypass294.Modify();   
         MarcusVip.Bypass295.Modify();
         MarcusVip.Bypass296.Modify();
         MarcusVip.Bypass297.Modify();
         MarcusVip.Bypass298.Modify();
         MarcusVip.Bypass299.Modify();
         MarcusVip.Bypass300.Modify();
         MarcusVip.Bypass301.Modify();
         MarcusVip.Bypass302.Modify();
         MarcusVip.Bypass303.Modify();
         MarcusVip.Bypass304.Modify();
         MarcusVip.Bypass305.Modify();
         MarcusVip.Bypass306.Modify();
         MarcusVip.Bypass307.Modify();
         MarcusVip.Bypass308.Modify();   
         MarcusVip.Bypass309.Modify(); 
                MarcusVip.Bypass310.Modify();
                MarcusVip.Bypass311.Modify();
                MarcusVip.Bypass312.Modify();
                MarcusVip.Bypass313.Modify();
                MarcusVip.Bypass314.Modify();
                MarcusVip.Bypass315.Modify();
                MarcusVip.Bypass316.Modify();
                MarcusVip.Bypass317.Modify();
                MarcusVip.Bypass318.Modify();
                MarcusVip.Bypass319.Modify();
                MarcusVip.Bypass320.Modify();
                MarcusVip.Bypass321.Modify();
                MarcusVip.Bypass322.Modify();
                MarcusVip.Bypass323.Modify();
                MarcusVip.Bypass324.Modify();
                MarcusVip.Bypass325.Modify();
                MarcusVip.Bypass326.Modify();
                MarcusVip.Bypass327.Modify();
                MarcusVip.Bypass328.Modify();
                MarcusVip.Bypass329.Modify();
                MarcusVip.Bypass330.Modify();
                MarcusVip.Bypass331.Modify();
                MarcusVip.Bypass332.Modify();
                MarcusVip.Bypass333.Modify();
                MarcusVip.Bypass334.Modify();
                MarcusVip.Bypass335.Modify();
                MarcusVip.Bypass336.Modify();
                MarcusVip.Bypass337.Modify();
                MarcusVip.Bypass338.Modify();
                MarcusVip.Bypass339.Modify();
                MarcusVip.Bypass340.Modify();
                MarcusVip.Bypass341.Modify();
                MarcusVip.Bypass342.Modify();
                MarcusVip.Bypass343.Modify();
                MarcusVip.Bypass344.Modify();
                MarcusVip.Bypass345.Modify();
                MarcusVip.Bypass346.Modify();
                MarcusVip.Bypass347.Modify();
                MarcusVip.Bypass348.Modify();
                MarcusVip.Bypass349.Modify();
                MarcusVip.Bypass350.Modify();
                MarcusVip.Bypass351.Modify();
                MarcusVip.Bypass352.Modify();
                MarcusVip.Bypass353.Modify();
                MarcusVip.Bypass354.Modify();
                MarcusVip.Bypass355.Modify();
                MarcusVip.Bypass356.Modify();
                MarcusVip.Bypass357.Modify();
                MarcusVip.Bypass358.Modify();
                MarcusVip.Bypass359.Modify();
                MarcusVip.Bypass360.Modify();
         MarcusVip.Bypass361.Modify();   
         MarcusVip.Bypass362.Modify();
         MarcusVip.Bypass363.Modify();
         MarcusVip.Bypass364.Modify();
         MarcusVip.Bypass365.Modify();
         MarcusVip.Bypass366.Modify();
         MarcusVip.Bypass367.Modify();
         MarcusVip.Bypass368.Modify();
         MarcusVip.Bypass369.Modify();
         MarcusVip.Bypass370.Modify();
         MarcusVip.Bypass371.Modify();
         MarcusVip.Bypass372.Modify();
         MarcusVip.Bypass373.Modify();
         MarcusVip.Bypass374.Modify();
         MarcusVip.Bypass375.Modify();   
         MarcusVip.Bypass376.Modify(); 
                MarcusVip.Bypass377.Modify();
                MarcusVip.Bypass377.Modify();
                MarcusVip.Bypass378.Modify();
                MarcusVip.Bypass379.Modify();
                MarcusVip.Bypass380.Modify();
                MarcusVip.Bypass381.Modify();
                MarcusVip.Bypass382.Modify();
                MarcusVip.Bypass383.Modify();
                MarcusVip.Bypass384.Modify();
                MarcusVip.Bypass385.Modify();
                MarcusVip.Bypass386.Modify();
                MarcusVip.Bypass387.Modify();
                MarcusVip.Bypass388.Modify();
                MarcusVip.Bypass389.Modify();
                MarcusVip.Bypass390.Modify();
                MarcusVip.Bypass391.Modify();
                MarcusVip.Bypass392.Modify();
                MarcusVip.Bypass393.Modify();
                MarcusVip.Bypass394.Modify();
                MarcusVip.Bypass395.Modify();
                MarcusVip.Bypass395.Modify();
                MarcusVip.Bypass397.Modify();
                MarcusVip.Bypass398.Modify();
                MarcusVip.Bypass399.Modify();
                MarcusVip.Bypass400.Modify();
            } else {
MarcusVip.Bypass.Restore();
MarcusVip.Bypass1.Restore();
MarcusVip.Bypass2.Restore();
MarcusVip.Bypass3.Restore();
MarcusVip.Bypass4.Restore();
MarcusVip.Bypass5.Restore();
MarcusVip.Bypass6.Restore();
MarcusVip.Bypass7.Restore();
MarcusVip.Bypass8.Restore();
MarcusVip.Bypass9.Restore();
MarcusVip.Bypass10.Restore();
MarcusVip.Bypass11.Restore();
MarcusVip.Bypass12.Restore();
MarcusVip.Bypass13.Restore();
MarcusVip.Bypass14.Restore();
MarcusVip.Bypass15.Restore();
MarcusVip.Bypass16.Restore();
MarcusVip.Bypass17.Restore();
MarcusVip.Bypass18.Restore();
MarcusVip.Bypass19.Restore();
MarcusVip.Bypass20.Restore();
MarcusVip.Bypass21.Restore();
MarcusVip.Bypass22.Restore();
MarcusVip.Bypass23.Restore();
MarcusVip.Bypass24.Restore();
MarcusVip.Bypass25.Restore();
MarcusVip.Bypass26.Restore();
MarcusVip.Bypass27.Restore();
MarcusVip.Bypass28.Restore();
MarcusVip.Bypass29.Restore();
MarcusVip.Bypass30.Restore();
MarcusVip.Bypass31.Restore();
MarcusVip.Bypass32.Restore();
MarcusVip.Bypass33.Restore();
MarcusVip.Bypass34.Restore();
MarcusVip.Bypass35.Restore();
MarcusVip.Bypass36.Restore();
MarcusVip.Bypass37.Restore();
MarcusVip.Bypass38.Restore();
MarcusVip.Bypass39.Restore();
MarcusVip.Bypass40.Restore();
MarcusVip.Bypass41.Restore();
MarcusVip.Bypass42.Restore();
MarcusVip.Bypass43.Restore();
MarcusVip.Bypass44.Restore();
MarcusVip.Bypass45.Restore();
MarcusVip.Bypass46.Restore();
MarcusVip.Bypass47.Restore();
MarcusVip.Bypass48.Restore();
MarcusVip.Bypass49.Restore();
MarcusVip.Bypass50.Restore();
MarcusVip.Bypass51.Restore();
MarcusVip.Bypass52.Restore();
MarcusVip.Bypass53.Restore();
MarcusVip.Bypass54.Restore();
MarcusVip.Bypass55.Restore();
MarcusVip.Bypass56.Restore();
MarcusVip.Bypass57.Restore();
MarcusVip.Bypass58.Restore();
MarcusVip.Bypass59.Restore();
MarcusVip.Bypass60.Restore();
MarcusVip.Bypass61.Restore();
MarcusVip.Bypass62.Restore();
MarcusVip.Bypass63.Restore();
MarcusVip.Bypass64.Restore();
MarcusVip.Bypass65.Restore();
MarcusVip.Bypass66.Restore();
MarcusVip.Bypass67.Restore();
MarcusVip.Bypass68.Restore();
MarcusVip.Bypass69.Restore();
MarcusVip.Bypass70.Restore();
MarcusVip.Bypass71.Restore();
MarcusVip.Bypass72.Restore();
MarcusVip.Bypass73.Restore();
MarcusVip.Bypass74.Restore();
MarcusVip.Bypass75.Restore();
MarcusVip.Bypass76.Restore();
MarcusVip.Bypass77.Restore();
MarcusVip.Bypass78.Restore();
MarcusVip.Bypass79.Restore();
MarcusVip.Bypass80.Restore();
MarcusVip.Bypass81.Restore();
MarcusVip.Bypass82.Restore();
MarcusVip.Bypass83.Restore();
MarcusVip.Bypass84.Restore();
MarcusVip.Bypass85.Restore();
MarcusVip.Bypass86.Restore();
MarcusVip.Bypass87.Restore();
MarcusVip.Bypass88.Restore();
MarcusVip.Bypass89.Restore();
MarcusVip.Bypass90.Restore();
MarcusVip.Bypass91.Restore();
MarcusVip.Bypass92.Restore();
MarcusVip.Bypass93.Restore();
MarcusVip.Bypass94.Restore();
MarcusVip.Bypass95.Restore();
MarcusVip.Bypass96.Restore();
MarcusVip.Bypass97.Restore();
MarcusVip.Bypass98.Restore();
MarcusVip.Bypass99.Restore();
MarcusVip.Bypass100.Restore();
MarcusVip.Bypass101.Restore();
MarcusVip.Bypass102.Restore();
MarcusVip.Bypass103.Restore();
MarcusVip.Bypass104.Restore();
MarcusVip.Bypass105.Restore();
MarcusVip.Bypass106.Restore();
MarcusVip.Bypass107.Restore();
MarcusVip.Bypass108.Restore();
MarcusVip.Bypass109.Restore();
MarcusVip.Bypass110.Restore();
MarcusVip.Bypass111.Restore();
MarcusVip.Bypass112.Restore();
MarcusVip.Bypass113.Restore();
MarcusVip.Bypass114.Restore();
MarcusVip.Bypass115.Restore();
MarcusVip.Bypass116.Restore();
MarcusVip.Bypass117.Restore();
MarcusVip.Bypass118.Restore();
MarcusVip.Bypass119.Restore();
MarcusVip.Bypass120.Restore();
MarcusVip.Bypass121.Restore();
MarcusVip.Bypass122.Restore();
MarcusVip.Bypass123.Restore();
MarcusVip.Bypass124.Restore();
MarcusVip.Bypass125.Restore();
MarcusVip.Bypass126.Restore();
MarcusVip.Bypass127.Restore();
MarcusVip.Bypass128.Restore();
MarcusVip.Bypass129.Restore();
MarcusVip.Bypass130.Restore();
MarcusVip.Bypass131.Restore();
MarcusVip.Bypass132.Restore();
MarcusVip.Bypass133.Restore();
MarcusVip.Bypass134.Restore();
MarcusVip.Bypass135.Restore();
MarcusVip.Bypass136.Restore();
MarcusVip.Bypass137.Restore();
MarcusVip.Bypass138.Restore();
MarcusVip.Bypass139.Restore();
MarcusVip.Bypass140.Restore();
MarcusVip.Bypass141.Restore();
MarcusVip.Bypass142.Restore();
MarcusVip.Bypass143.Restore();
MarcusVip.Bypass144.Restore();
MarcusVip.Bypass145.Restore();
MarcusVip.Bypass146.Restore();
MarcusVip.Bypass147.Restore();
MarcusVip.Bypass148.Restore();
MarcusVip.Bypass149.Restore();
MarcusVip.Bypass150.Restore();
MarcusVip.Bypass151.Restore();
MarcusVip.Bypass152.Restore();
MarcusVip.Bypass153.Restore();
MarcusVip.Bypass154.Restore();
MarcusVip.Bypass155.Restore();
MarcusVip.Bypass156.Restore();
MarcusVip.Bypass157.Restore();
MarcusVip.Bypass158.Restore();
MarcusVip.Bypass159.Restore();
MarcusVip.Bypass160.Restore();
MarcusVip.Bypass161.Restore();
MarcusVip.Bypass162.Restore();
MarcusVip.Bypass163.Restore();
MarcusVip.Bypass164.Restore();
MarcusVip.Bypass165.Restore();
MarcusVip.Bypass166.Restore();
MarcusVip.Bypass167.Restore();
MarcusVip.Bypass168.Restore();
MarcusVip.Bypass169.Restore();
MarcusVip.Bypass170.Restore();
MarcusVip.Bypass171.Restore();
MarcusVip.Bypass172.Restore();
MarcusVip.Bypass173.Restore();
MarcusVip.Bypass174.Restore();
MarcusVip.Bypass175.Restore();
MarcusVip.Bypass176.Restore();
MarcusVip.Bypass177.Restore();
MarcusVip.Bypass178.Restore();
MarcusVip.Bypass179.Restore();
MarcusVip.Bypass180.Restore();
MarcusVip.Bypass181.Restore();
MarcusVip.Bypass182.Restore();
         MarcusVip.Bypass183.Restore();
         MarcusVip.Bypass184.Restore();   
         MarcusVip.Bypass186.Restore();
         MarcusVip.Bypass187.Restore();
         MarcusVip.Bypass188.Restore();
         MarcusVip.Bypass189.Restore();
         MarcusVip.Bypass190.Restore();
         MarcusVip.Bypass191.Restore();
         MarcusVip.Bypass192.Restore();
         MarcusVip.Bypass193.Restore();
         MarcusVip.Bypass194.Restore();
         MarcusVip.Bypass195.Restore();
         MarcusVip.Bypass196.Restore();
         MarcusVip.Bypass197.Restore();
         MarcusVip.Bypass198.Restore();
         MarcusVip.Bypass199.Restore();   
         MarcusVip.Bypass200.Restore(); 
                MarcusVip.Bypass201.Restore();
                MarcusVip.Bypass202.Restore();
                MarcusVip.Bypass203.Restore();
                MarcusVip.Bypass204.Restore();
                MarcusVip.Bypass205.Restore();
                MarcusVip.Bypass206.Restore();
                MarcusVip.Bypass207.Restore();
                MarcusVip.Bypass208.Restore();
                MarcusVip.Bypass209.Restore();
                MarcusVip.Bypass210.Restore();
                MarcusVip.Bypass211.Restore();
                MarcusVip.Bypass212.Restore();
                MarcusVip.Bypass213.Restore();
                MarcusVip.Bypass214.Restore();
                MarcusVip.Bypass215.Restore();
                MarcusVip.Bypass216.Restore();
                MarcusVip.Bypass217.Restore();
                MarcusVip.Bypass218.Restore();
                MarcusVip.Bypass219.Restore();
                MarcusVip.Bypass220.Restore();
                MarcusVip.Bypass221.Restore();
                MarcusVip.Bypass222.Restore();
                MarcusVip.Bypass223.Restore();
                MarcusVip.Bypass224.Restore();
                MarcusVip.Bypass225.Restore();
                MarcusVip.Bypass226.Restore();
                MarcusVip.Bypass227.Restore();
                MarcusVip.Bypass228.Restore();
                MarcusVip.Bypass229.Restore();
                MarcusVip.Bypass230.Restore();
                MarcusVip.Bypass231.Restore();
                MarcusVip.Bypass232.Restore();
                MarcusVip.Bypass233.Restore();
                MarcusVip.Bypass234.Restore();
                MarcusVip.Bypass235.Restore();
                MarcusVip.Bypass236.Restore();
                MarcusVip.Bypass237.Restore();
                MarcusVip.Bypass238.Restore();
                MarcusVip.Bypass239.Restore();
                MarcusVip.Bypass240.Restore();
                MarcusVip.Bypass241.Restore();
                MarcusVip.Bypass242.Restore();
                MarcusVip.Bypass243.Restore();
                MarcusVip.Bypass244.Restore();
                MarcusVip.Bypass245.Restore();
                MarcusVip.Bypass246.Restore();
                MarcusVip.Bypass247.Restore();
                MarcusVip.Bypass248.Restore();
                MarcusVip.Bypass249.Restore();
                MarcusVip.Bypass250.Restore();
                MarcusVip.Bypass251.Restore();
MarcusVip.Bypass252.Restore();
MarcusVip.Bypass253.Restore();
MarcusVip.Bypass254.Restore();
MarcusVip.Bypass255.Restore();
MarcusVip.Bypass256.Restore();
MarcusVip.Bypass257.Restore();
MarcusVip.Bypass258.Restore();
MarcusVip.Bypass259.Restore();
MarcusVip.Bypass260.Restore();
MarcusVip.Bypass261.Restore();
MarcusVip.Bypass262.Restore();
MarcusVip.Bypass263.Restore();
MarcusVip.Bypass264.Restore();
MarcusVip.Bypass265.Restore();
MarcusVip.Bypass266.Restore();
MarcusVip.Bypass267.Restore();
MarcusVip.Bypass268.Restore();
MarcusVip.Bypass269.Restore();
MarcusVip.Bypass270.Restore();
MarcusVip.Bypass271.Restore();
MarcusVip.Bypass272.Restore();
MarcusVip.Bypass273.Restore();
MarcusVip.Bypass274.Restore();
MarcusVip.Bypass275.Restore();
MarcusVip.Bypass276.Restore();
MarcusVip.Bypass277.Restore();
MarcusVip.Bypass278.Restore();
MarcusVip.Bypass279.Restore();
MarcusVip.Bypass280.Restore();
MarcusVip.Bypass281.Restore();
MarcusVip.Bypass282.Restore();
MarcusVip.Bypass283.Restore();
MarcusVip.Bypass284.Restore();
MarcusVip.Bypass285.Restore();
MarcusVip.Bypass286.Restore();
MarcusVip.Bypass287.Restore();
MarcusVip.Bypass288.Restore();
MarcusVip.Bypass289.Restore();
MarcusVip.Bypass290.Restore();
MarcusVip.Bypass291.Restore();
MarcusVip.Bypass292.Restore();
         MarcusVip.Bypass293.Restore();
         MarcusVip.Bypass294.Restore();   
         MarcusVip.Bypass295.Restore();
         MarcusVip.Bypass296.Restore();
         MarcusVip.Bypass297.Restore();
         MarcusVip.Bypass298.Restore();
         MarcusVip.Bypass299.Restore();
         MarcusVip.Bypass300.Restore();
         MarcusVip.Bypass301.Restore();
         MarcusVip.Bypass302.Restore();
         MarcusVip.Bypass303.Restore();
         MarcusVip.Bypass304.Restore();
         MarcusVip.Bypass305.Restore();
         MarcusVip.Bypass306.Restore();
         MarcusVip.Bypass307.Restore();
         MarcusVip.Bypass308.Restore();   
         MarcusVip.Bypass309.Restore(); 
                MarcusVip.Bypass310.Restore();
                MarcusVip.Bypass311.Restore();
                MarcusVip.Bypass312.Restore();
                MarcusVip.Bypass313.Restore();
                MarcusVip.Bypass314.Restore();
                MarcusVip.Bypass315.Restore();
                MarcusVip.Bypass316.Restore();
                MarcusVip.Bypass317.Restore();
                MarcusVip.Bypass318.Restore();
                MarcusVip.Bypass319.Restore();
                MarcusVip.Bypass320.Restore();
                MarcusVip.Bypass321.Restore();
                MarcusVip.Bypass322.Restore();
                MarcusVip.Bypass323.Restore();
                MarcusVip.Bypass324.Restore();
                MarcusVip.Bypass325.Restore();
                MarcusVip.Bypass326.Restore();
                MarcusVip.Bypass327.Restore();
                MarcusVip.Bypass328.Restore();
                MarcusVip.Bypass329.Restore();
                MarcusVip.Bypass330.Restore();
                MarcusVip.Bypass331.Restore();
                MarcusVip.Bypass332.Restore();
                MarcusVip.Bypass333.Restore();
                MarcusVip.Bypass334.Restore();
                MarcusVip.Bypass335.Restore();
                MarcusVip.Bypass336.Restore();
                MarcusVip.Bypass337.Restore();
                MarcusVip.Bypass338.Restore();
                MarcusVip.Bypass339.Restore();
                MarcusVip.Bypass340.Restore();
                MarcusVip.Bypass341.Restore();
                MarcusVip.Bypass342.Restore();
                MarcusVip.Bypass343.Restore();
                MarcusVip.Bypass344.Restore();
                MarcusVip.Bypass345.Restore();
                MarcusVip.Bypass346.Restore();
                MarcusVip.Bypass347.Restore();
                MarcusVip.Bypass348.Restore();
                MarcusVip.Bypass349.Restore();
                MarcusVip.Bypass350.Restore();
                MarcusVip.Bypass351.Restore();
                MarcusVip.Bypass352.Restore();
                MarcusVip.Bypass353.Restore();
                MarcusVip.Bypass354.Restore();
                MarcusVip.Bypass355.Restore();
                MarcusVip.Bypass356.Restore();
                MarcusVip.Bypass357.Restore();
                MarcusVip.Bypass358.Restore();
                MarcusVip.Bypass359.Restore();
                MarcusVip.Bypass360.Restore();
         MarcusVip.Bypass361.Restore();   
         MarcusVip.Bypass362.Restore();
         MarcusVip.Bypass363.Restore();
         MarcusVip.Bypass364.Restore();
         MarcusVip.Bypass365.Restore();
         MarcusVip.Bypass366.Restore();
         MarcusVip.Bypass367.Restore();
         MarcusVip.Bypass368.Restore();
         MarcusVip.Bypass369.Restore();
         MarcusVip.Bypass370.Restore();
         MarcusVip.Bypass371.Restore();
         MarcusVip.Bypass372.Restore();
         MarcusVip.Bypass373.Restore();
         MarcusVip.Bypass374.Restore();
         MarcusVip.Bypass375.Restore();   
         MarcusVip.Bypass376.Restore(); 
                MarcusVip.Bypass377.Restore();
                MarcusVip.Bypass377.Restore();
                MarcusVip.Bypass378.Restore();
                MarcusVip.Bypass379.Restore();
                MarcusVip.Bypass380.Restore();
                MarcusVip.Bypass381.Restore();
                MarcusVip.Bypass382.Restore();
                MarcusVip.Bypass383.Restore();
                MarcusVip.Bypass384.Restore();
                MarcusVip.Bypass385.Restore();
                MarcusVip.Bypass386.Restore();
                MarcusVip.Bypass387.Restore();
                MarcusVip.Bypass388.Restore();
                MarcusVip.Bypass389.Restore();
                MarcusVip.Bypass390.Restore();
                MarcusVip.Bypass391.Restore();
                MarcusVip.Bypass392.Restore();
                MarcusVip.Bypass393.Restore();
                MarcusVip.Bypass394.Restore();
                MarcusVip.Bypass395.Restore();
                MarcusVip.Bypass395.Restore();
                MarcusVip.Bypass397.Restore();
                MarcusVip.Bypass398.Restore();
                MarcusVip.Bypass399.Restore();
                MarcusVip.Bypass400.Restore();
                
            }
                break;
					case 2:
                        Noshake = jboolean1; 
                        if (Noshake) {
                        MarcusVip.Noshake.Modify();
						MarcusVip.Noshake1.Modify();
                        } else {
                        MarcusVip.Noshake.Restore();
						MarcusVip.Noshake1.Restore();
                        }
                        break;	
					case 4:
                        Lesscoil = jboolean1; 
                        if (Lesscoil) {
                        MarcusVip.Lesscoil.Modify();
                        } else {
                        MarcusVip.Lesscoil.Restore();
                        }                        
                        break;	
					case 5:
                        Blackbody = jboolean1; 
                        if (Blackbody) {
                        MarcusVip.Blackbody.Modify();
                        } else {
                        MarcusVip.Blackbody.Restore();
                        }                        
                        break;	
					case 6:
                        Blacksky = jboolean1; 
                        if (Blacksky) {
                        MarcusVip.Blacksky.Modify();
                        } else {
                        MarcusVip.Blacksky.Restore();
                        }                       
                        break;	
					case 7:
                        Aimbot = jboolean1; 
                        if (Aimbot) {
                        MarcusVip.Aimbot1.Modify();
						MarcusVip.Aimbot2.Modify();
                        } else {
                        MarcusVip.Aimbot1.Restore();
						MarcusVip.Aimbot2.Restore();
                        }
                        
				
                        break;	
					case 9:
                        Nofog = jboolean1; 
                        if (Nofog) {
                        MarcusVip.Nofog.Modify();
                        } else {
                        MarcusVip.Nofog.Restore();
                        }
                        break;	
					case 10:
                        Speedcar = jboolean1; 
                        if (Speedcar) {
                        MarcusVip.Speedcar.Modify();
                        } else {
                        MarcusVip.Speedcar.Restore();
                        }
                        break;	
					case 11:
                        Carjump = jboolean1; 
                        if (Carjump) {
                        MarcusVip.Carjump.Modify();
                        } else {
                        MarcusVip.Carjump.Restore();
                        }
                        break;	
					case 12:
                        Longjump = jboolean1; 
                        if (Longjump) {
                        MarcusVip.Longjump.Modify();
                        } else {
                        MarcusVip.Longjump.Restore();
                        }
                        break;	
					case 13:
                        Flash = jboolean1; 
                        if (Flash) {
                        MarcusVip.Flash.Modify();
                        } else {
                        MarcusVip.Flash.Restore();
                        }
                        break;	
					case 14:
                        Statuemode = jboolean1; 
                        if (Statuemode) {
                        MarcusVip.Statuemode.Modify();
                        } else {
                        MarcusVip.Statuemode.Restore();
                        }
                        break;	
					case 15:
                        Darkmode = jboolean1; 
                        if (Blackbody) {
                        MarcusVip.Darkmode.Modify();
                        } else {
                        MarcusVip.Darkmode.Restore();
                        }
                        break;	
					case 16:
                        Desertmap = jboolean1; 
                        if (Desertmap) {
                        MarcusVip.Desertmap.Modify();
                        } else {
                        MarcusVip.Desertmap.Restore();
                        }
                        break;	
					case 17:
                        Notree = jboolean1; 
                        if (Notree) {
                        MarcusVip.Notree.Modify();
                        } else {
                        MarcusVip.Notree.Restore();
                        }
                        break;	
					case 18:
                        Fixstuck = jboolean1; 
                        if (Fixstuck) {
                        MarcusVip.Fixstuck.Modify();
                        } else {
                        MarcusVip.Fixstuck.Restore();
                        }
                        break;	
					case 19:
                        Slowmotion = jboolean1; 
                        if (Slowmotion) {
                        MarcusVip.Slowmotion.Modify();
                        } else {
                        MarcusVip.Slowmotion.Restore();
                        }
                        break;	
					case 20:
                        Antipull = jboolean1; 
                        if (Antipull) {
                        MarcusVip.Antipull.Modify();
                        } else {
                        MarcusVip.Antipull.Restore();
                        }
                        break;	
					case 21:
                        WallLoot = jboolean1; 
                        if (WallLoot) {
                        MarcusVip.WallLoot.Modify();
                        } else {
                        MarcusVip.WallLoot.Restore();
                        }
                        break;	
					case 22:
                        Maggic = jboolean1; 
                        if (Maggic) {
                        MarcusVip.Maggic.Modify();
                        } else {
                        MarcusVip.Maggic.Restore();
                        }
                        break;	
                        case 23:
                        Speedrun = jboolean1; 
                        if (Speedrun) {
                        MarcusVip.Speedrun.Modify();
                        } else {
                        MarcusVip.Speedrun.Restore();
                        }
                        break;	
					case 24:
                        Standscope = jboolean1; 
                        if (Standscope) {
                        MarcusVip.Standscope.Modify();
                        } else {
                        MarcusVip.Standscope.Restore();
                        }
                        break;	
					case 25:
                        Pronescope = jboolean1; 
                        if (Pronescope) {
                        MarcusVip.Pronescope.Modify();
                        } else {
                        MarcusVip.Pronescope.Restore();
                        }
                        break;	
					case 26:
                        Knockspeed = jboolean1; 
                        if (Knockspeed) {
                        MarcusVip.Knockspeed.Modify();
                        } else {
                        MarcusVip.Knockspeed.Restore();
                        }
                        break;	
					case 27:
                        Xhit = jboolean1; 
                        if (Xhit) {
                        MarcusVip.Xhit.Modify();
                        } else {
                        MarcusVip.Xhit.Restore();
                        }
                        break;	
					case 28:
                        Autodrive = jboolean1; 
                        if (Autodrive) {
                        MarcusVip.Autodrive.Modify();
                        } else {
                        MarcusVip.Autodrive.Restore();
                        }
                        break;	
					case 29:
                        Wallshot = jboolean1; 
                        if (Wallshot) {
                        MarcusVip.Wallshot1.Modify();
                        MarcusVip.Wallshot2.Modify();
                        MarcusVip.Wallshot3.Modify();
                        } else {
                        MarcusVip.Wallshot1.Restore();
                        MarcusVip.Wallshot2.Modify();
                        MarcusVip.Wallshot3.Modify();
                        }
                        break;	
					case 30:
                        Redfog = jboolean1; 
                        if (Redfog) {
                        MarcusVip.Redfog1.Modify();
                        MarcusVip.Redfog2.Modify();
                        } else {
                        MarcusVip.Redfog1.Restore();
                        MarcusVip.Redfog2.Modify();
                        }
                        break;	
					case 31:
                        Blackfog = jboolean1; 
                        if (Blackfog) {
                        MarcusVip.Blackfog1.Modify();
                        MarcusVip.Blackfog2.Modify();
                        MarcusVip.Blackfog3.Modify();
                        } else {
                        MarcusVip.Blackfog1.Restore();
                        MarcusVip.Blackfog2.Modify();
                        MarcusVip.Blackfog3.Modify();                        
                        }
                        break;	
					case 32:
                        Greenfog = jboolean1; 
                        if (Greenfog) {
                        MarcusVip.Greenfog1.Modify();
                        MarcusVip.Greenfog2.Modify();
                        } else {
                        MarcusVip.Greenfog1.Restore();
                        MarcusVip.Greenfog2.Modify();
                        }
                        break;	
					case 33:
                        Darkbluefog = jboolean1; 
                        if (Darkbluefog) {
                        MarcusVip.Darkbluefog1.Modify();
                        MarcusVip.Darkbluefog2.Modify();
                        } else {
                        MarcusVip.Darkbluefog1.Restore();
                        MarcusVip.Darkbluefog2.Modify();
                        }
                        break;	
					case 34:
                        Cyanfog = jboolean1; 
                        if (Cyanfog) {
                        MarcusVip.Cyanfog.Modify();
                        } else {
                        MarcusVip.Cyanfog.Restore();
                        }
                        break;	
					case 35:
                        Purplefog = jboolean1; 
                        if (Purplefog) {
                        MarcusVip.Purplefog.Modify();
                        } else {
                        MarcusVip.Purplefog.Restore();
                        }
                        break;	
					case 36:
                        Litegreenfog = jboolean1; 
                        if (Litegreenfog) {
                        MarcusVip.Litegreenfog.Modify();
                        } else {
                        MarcusVip.Litegreenfog.Restore();
                        }
                        break;	
					case 37:
                        Aim = jboolean1; 
                        if (Aim) {
                        MarcusVip.Aim1.Modify();
                        MarcusVip.Aim2.Modify();
                        MarcusVip.Aim3.Modify();
                        MarcusVip.Aim4.Modify();
                        MarcusVip.Aim5.Modify();
                        MarcusVip.Aim6.Modify();
                        MarcusVip.Aim7.Modify();
                        MarcusVip.Aim8.Modify();
                        MarcusVip.Aim9.Modify();
                        MarcusVip.Aim10.Modify();
                        MarcusVip.Aim11.Modify();
                        MarcusVip.Aim12.Modify();
                        MarcusVip.Aim13.Modify();
                        } else {
                        MarcusVip.Aim1.Restore();
                        MarcusVip.Aim2.Modify();
                        MarcusVip.Aim3.Modify();
                        MarcusVip.Aim4.Modify();
                        MarcusVip.Aim5.Modify();
                        MarcusVip.Aim6.Modify();
                        MarcusVip.Aim7.Modify();
                        MarcusVip.Aim8.Modify();
                        MarcusVip.Aim9.Modify();
                        MarcusVip.Aim10.Modify();
                        MarcusVip.Aim11.Modify();
                        MarcusVip.Aim12.Modify();
                        MarcusVip.Aim13.Modify();
                        }
                        break;
                        case 38:
                        Hit = jboolean1; 
                        if (Hit) {
                        MarcusVip.Hit.Modify();
                        } else {
                        MarcusVip.Hit.Restore();
                        }                        
                        break;	
        
            break;
    }

} 


int Register1(JNIEnv *env) {
    JNINativeMethod methods[] = {{"onSendConfig", "(Ljava/lang/String;Ljava/lang/String;)V", (void *) native_onSendConfig},
                                 {"onCanvasDraw", "(Landroid/graphics/Canvas;IIF)V",         (void *) native_onCanvasDraw},
                                 {"Switch", "(IZ)V", (void *) native_onSwitch}};

    // Class to be written after adding functions 
    jclass clazz = env->FindClass("com/MarcusCheaT/Floating");
    if (!clazz)
        return -1;

    if (env->RegisterNatives(clazz, methods, sizeof(methods) / sizeof(methods[0])) != 0)
        return -1;

    return 0;
}

void *hack_thread(void *) {

    ProcMap libtersafe;
    do {
        libtersafe = KittyMemory::getLibraryMap("libtersafe.so");
        
        sleep(1);
    } while (!libtersafe.isValid());
    sleep(1);
    
    


                       // BYPASS MENU //
                       
                       
                                                               
    MarcusVip.Bypass = MemoryPatch::createWithHex("Libue4.so", 0x3D310D40 , "x04/x00/x00/x00");
    MarcusVip.Bypass1 = MemoryPatch::createWithHex("Libue4.so", 0x3451A38, "x04/x00/x00/x00");
    MarcusVip.Bypass2 = MemoryPatch::createWithHex("Libue4.so", 0x3587118, "x04/x00/x00/x00");
    MarcusVip.Bypass3 = MemoryPatch::createWithHex("Libue4.so", 0x35CC6A0, "x04/x00/x00/x00");
    MarcusVip.Bypass4 = MemoryPatch::createWithHex("Libue4.so", 0x35CC860, "x04/x00/x00/x00");
    MarcusVip.Bypass5 = MemoryPatch::createWithHex("Libue4.so", 0x35CC874, "x04/x00/x00/x00");
    MarcusVip.Bypass6 = MemoryPatch::createWithHex("Libue4.so", 0x35CC900, "x04/x00/x00/x00");
    MarcusVip.Bypass7 = MemoryPatch::createWithHex("Libue4.so", 0x35CC954, "x04/x00/x00/x00");
    MarcusVip.Bypass8 = MemoryPatch::createWithHex("Libue4.so", 0x35CCBE0, "x04/x00/x00/x00");
    MarcusVip.Bypass9 = MemoryPatch::createWithHex("Libue4.so", 0x35CD0E0, "x04/x00/x00/x00");
    MarcusVip.Bypass9 = MemoryPatch::createWithHex("Libue4.so", 0x35CD408, "x04/x00/x00/x00");
    MarcusVip.Bypass10 = MemoryPatch::createWithHex("Libue4.so", 0x35CD4C4, "x04/x00/x00/x00");
    MarcusVip.Bypass11 = MemoryPatch::createWithHex("Libue4.so", 0x35CD6E4, "x04/x00/x00/x00");
    MarcusVip.Bypass12 = MemoryPatch::createWithHex("Libue4.so", 0x35CDC40, "x04/x00/x00/x00");
    MarcusVip.Bypass13 = MemoryPatch::createWithHex("Libue4.so", 0x35CE56C, "x04/x00/x00/x00");
    MarcusVip.Bypass14 = MemoryPatch::createWithHex("Libue4.so", 0x35CEA50, "x04/x00/x00/x00");
    MarcusVip.Bypass15 = MemoryPatch::createWithHex("Libue4.so", 0x35CEAF0, "x04/x00/x00/x00");
    MarcusVip.Bypass16 = MemoryPatch::createWithHex("Libue4.so", 0x35CED48, "x04/x00/x00/x00");
    MarcusVip.Bypass17 = MemoryPatch::createWithHex("Libue4.so", 0x35CEC8C, "x04/x00/x00/x00");
    MarcusVip.Bypass18 = MemoryPatch::createWithHex("Libue4.so", 0x35CEF08, "x04/x00/x00/x00");
    MarcusVip.Bypass19 = MemoryPatch::createWithHex("Libue4.so", 0x35CF234, "x04/x00/x00/x00");
    MarcusVip.Bypass20 = MemoryPatch::createWithHex("Libue4.so", 0x35CF284, "x04/x00/x00/x00");
    MarcusVip.Bypass21 = MemoryPatch::createWithHex("Libue4.so", 0x35CF28C, "x04/x00/x00/x00");
    MarcusVip.Bypass22 = MemoryPatch::createWithHex("Libue4.so", 0x35CF2AC, "x04/x00/x00/x00");
    MarcusVip.Bypass23 = MemoryPatch::createWithHex("Libue4.so", 0x35CF524, "x04/x00/x00/x00");
    MarcusVip.Bypass24 = MemoryPatch::createWithHex("Libue4.so", 0x35CF760, "x04/x00/x00/x00");
    MarcusVip.Bypass25 = MemoryPatch::createWithHex("Libue4.so", 0x35D0934, "x04/x00/x00/x00");
    MarcusVip.Bypass26 = MemoryPatch::createWithHex("Libue4.so", 0x35D09D8, "x04/x00/x00/x00");
    MarcusVip.Bypass27 = MemoryPatch::createWithHex("Libue4.so", 0x35D0A14, "x04/x00/x00/x00");
    MarcusVip.Bypass28 = MemoryPatch::createWithHex("Libue4.so", 0x35D0AF4, "x04/x00/x00/x00");
    MarcusVip.Bypass29 = MemoryPatch::createWithHex("Libue4.so", 0x35D0BD4, "x04/x00/x00/x00");
    MarcusVip.Bypass30 = MemoryPatch::createWithHex("Libue4.so", 0x35D0EC0, "x04/x00/x00/x00");
    MarcusVip.Bypass31 = MemoryPatch::createWithHex("Libue4.so", 0x124C7128, "x04/x00/x00/x00");
    MarcusVip.Bypass32 = MemoryPatch::createWithHex("Libue4.so", 0x124C7FDC, "x04/x00/x00/x00");
    MarcusVip.Bypass33 = MemoryPatch::createWithHex("Libue4.so", 0x1282120C, "x04/x00/x00/x00");
    MarcusVip.Bypass34 = MemoryPatch::createWithHex("Libue4.so", 0x12D6A93C, "x04/x00/x00/x00");
    MarcusVip.Bypass35 = MemoryPatch::createWithHex("Libue4.so", 0x134A9964, "x04/x00/x00/x00");
    MarcusVip.Bypass36 = MemoryPatch::createWithHex("Libue4.so", 0x134AABEC, "x04/x00/x00/x00");
    MarcusVip.Bypass37 = MemoryPatch::createWithHex("Libue4.so", 0x13E88FD0, "x04/x00/x00/x00");
    MarcusVip.Bypass38 = MemoryPatch::createWithHex("Libue4.so", 0x13E88FF8, "x04/x00/x00/x00");
    
    
    //libPandoraVideo
    MarcusVip.Bypass39 = MemoryPatch::createWithHex("Libpandora.so", 0xD58CA38, "x04/x00/x00/x00");
    MarcusVip.Bypass40 = MemoryPatch::createWithHex("Libpandora.so", 0xD58CA38, "x04/x00/x00/x00");
    MarcusVip.Bypass41 = MemoryPatch::createWithHex("Libpandora.so", 0xD6C2118, "x04/x00/x00/x00");
    MarcusVip.Bypass42 = MemoryPatch::createWithHex("Libpandora.so", 0xD7076A0, "x04/x00/x00/x00");
    MarcusVip.Bypass43 = MemoryPatch::createWithHex("Libpandora.so", 0xD707860, "x04/x00/x00/x00");
    MarcusVip.Bypass44 = MemoryPatch::createWithHex("Libpandora.so", 0xD707874, "x04/x00/x00/x00");
    MarcusVip.Bypass45 = MemoryPatch::createWithHex("Libpandora.so", 0xD707900, "x04/x00/x00/x00");
    MarcusVip.Bypass46 = MemoryPatch::createWithHex("Libpandora.so", 0xD707954, "x04/x00/x00/x00");
    MarcusVip.Bypass47 = MemoryPatch::createWithHex("Libpandora.so", 0xD707BE0, "x04/x00/x00/x00");
    MarcusVip.Bypass48 = MemoryPatch::createWithHex("Libpandora.so", 0xD7080E0, "x04/x00/x00/x00");
    MarcusVip.Bypass49 = MemoryPatch::createWithHex("Libpandora.so", 0xD708408, "x04/x00/x00/x00");
    MarcusVip.Bypass50 = MemoryPatch::createWithHex("Libpandora.so", 0xD7084C4, "x04/x00/x00/x00");
    MarcusVip.Bypass51 = MemoryPatch::createWithHex("Libpandora.so", 0xD7086E4, "x04/x00/x00/x00");
    MarcusVip.Bypass52 = MemoryPatch::createWithHex("Libpandora.so", 0xD708C40, "x04/x00/x00/x00");
    MarcusVip.Bypass53 = MemoryPatch::createWithHex("Libpandora.so", 0xD70956C, "x04/x00/x00/x00");
    MarcusVip.Bypass54 = MemoryPatch::createWithHex("Libpandora.so", 0xD709A50, "x04/x00/x00/x00");
    MarcusVip.Bypass55 = MemoryPatch::createWithHex("Libpandora.so", 0xD709AF0, "x04/x00/x00/x00");
    MarcusVip.Bypass56 = MemoryPatch::createWithHex("Libpandora.so", 0xD709C8C, "x04/x00/x00/x00");
    MarcusVip.Bypass57 = MemoryPatch::createWithHex("Libpandora.so", 0xD709D48, "x04/x00/x00/x00");
    MarcusVip.Bypass58 = MemoryPatch::createWithHex("Libpandora.so", 0xD709F08, "x04/x00/x00/x00"); 
    MarcusVip.Bypass59 = MemoryPatch::createWithHex("Libpandora.so", 0xD70A234, "x04/x00/x00/x00");
    MarcusVip.Bypass60 = MemoryPatch::createWithHex("Libpandora.so", 0xD70A284, "x04/x00/x00/x00");
    MarcusVip.Bypass61 = MemoryPatch::createWithHex("Libpandora.so", 0xD70A28C, "x04/x00/x00/x00");
    MarcusVip.Bypass62 = MemoryPatch::createWithHex("Libpandora.so", 0xD70A2AC, "x04/x00/x00/x00");
    MarcusVip.Bypass63 = MemoryPatch::createWithHex("Libpandora.so", 0xD70A524, "x04/x00/x00/x00");
    MarcusVip.Bypass64 = MemoryPatch::createWithHex("Libpandora.so", 0xD70A760, "x04/x00/x00/x00");
    MarcusVip.Bypass65 = MemoryPatch::createWithHex("Libpandora.so", 0xD70B934, "x04/x00/x00/x00");
    MarcusVip.Bypass66 = MemoryPatch::createWithHex("Libpandora.so", 0xD70B9D8, "x04/x00/x00/x00");
    MarcusVip.Bypass67 = MemoryPatch::createWithHex("Libpandora.so", 0xD70BA14, "x04/x00/x00/x00");
    MarcusVip.Bypass68 = MemoryPatch::createWithHex("Libpandora.so", 0xD70BAF4, "x04/x00/x00/x00");
    MarcusVip.Bypass69 = MemoryPatch::createWithHex("Libpandora.so", 0xD70BBD4, "x04/x00/x00/x00");
    MarcusVip.Bypass70 = MemoryPatch::createWithHex("Libpandora.so", 0xD70BD00, "x04/x00/x00/x00");
    MarcusVip.Bypass71 = MemoryPatch::createWithHex("Libpandora.so", 0xD70BEC0, "x04/x00/x00/x00");
    MarcusVip.Bypass72 = MemoryPatch::createWithHex("Libpandora.so", 0x1C602128, "x04/x00/x00/x00");
    MarcusVip.Bypass73 = MemoryPatch::createWithHex("Libpandora.so", 0x1C602FDC, "x04/x00/x00/x00");
    MarcusVip.Bypass74 = MemoryPatch::createWithHex("Libpandora.so", 0x1C95C20C, "x04/x00/x00/x00");
    MarcusVip.Bypass75 = MemoryPatch::createWithHex("Libpandora.so", 0x1CEA593C, "x04/x00/x00/x00");
    MarcusVip.Bypass76 = MemoryPatch::createWithHex("Libpandora.so", 0x1D5E4964, "x04/x00/x00/x00");
    MarcusVip.Bypass77 = MemoryPatch::createWithHex("Libpandora.so", 0x1D5E5BEC, "x04/x00/x00/x00");
    MarcusVip.Bypass78 = MemoryPatch::createWithHex("Libpandora.so", 0x1DFC3FD0, "x04/x00/x00/x00");
    MarcusVip.Bypass79 = MemoryPatch::createWithHex("Libpandora.so", 0x1DFC3FF8, "x04/x00/x00/x00");


    //libtersafe
    MarcusVip.Bypass80 = MemoryPatch::createWithHex("libtersafe.so", 0xC1AAA38, "x04/x00/x00/x00");
    MarcusVip.Bypass81 = MemoryPatch::createWithHex("libtersafe.so", 0xC2E0118, "x04/x00/x00/x00");
    MarcusVip.Bypass82 = MemoryPatch::createWithHex("libtersafe.so", 0xC3256A0, "x04/x00/x00/x00");
    MarcusVip.Bypass83 = MemoryPatch::createWithHex("libtersafe.so", 0xC325860, "x04/x00/x00/x00");
    MarcusVip.Bypass84 = MemoryPatch::createWithHex("libtersafe.so", 0xC325874, "x04/x00/x00/x00");
    MarcusVip.Bypass85 = MemoryPatch::createWithHex("libtersafe.so", 0xC325900, "x04/x00/x00/x00");
    MarcusVip.Bypass86 = MemoryPatch::createWithHex("libtersafe.so", 0xC325954, "x04/x00/x00/x00");
    MarcusVip.Bypass87 = MemoryPatch::createWithHex("libtersafe.so", 0xC325BE0, "x04/x00/x00/x00");
    MarcusVip.Bypass88 = MemoryPatch::createWithHex("libtersafe.so", 0xC3260E0, "x04/x00/x00/x00");
    MarcusVip.Bypass89 = MemoryPatch::createWithHex("libtersafe.so", 0xC326408, "x04/x00/x00/x00");
    MarcusVip.Bypass90 = MemoryPatch::createWithHex("libtersafe.so", 0xC3264C4, "x04/x00/x00/x00");
    MarcusVip.Bypass91 = MemoryPatch::createWithHex("libtersafe.so", 0xC326620, "x04/x00/x00/x00");
    MarcusVip.Bypass92 = MemoryPatch::createWithHex("libtersafe.so", 0xC3266E4, "x04/x00/x00/x00");
    MarcusVip.Bypass93 = MemoryPatch::createWithHex("libtersafe.so", 0xC326C40, "x04/x00/x00/x00");
    MarcusVip.Bypass94 = MemoryPatch::createWithHex("libtersafe.so", 0xC32756C, "x04/x00/x00/x00");
    MarcusVip.Bypass95= MemoryPatch::createWithHex("libtersafe.so", 0xC327A50, "x04/x00/x00/x00");
    MarcusVip.Bypass96 = MemoryPatch::createWithHex("libtersafe.so", 0xC327AF0, "x04/x00/x00/x00");
    MarcusVip.Bypass97 = MemoryPatch::createWithHex("libtersafe.so", 0xC327C8C, "x04/x00/x00/x00");
    MarcusVip.Bypass98 = MemoryPatch::createWithHex("libtersafe.so", 0xC327D48, "x04/x00/x00/x00");
    MarcusVip.Bypass99 = MemoryPatch::createWithHex("libtersafe.so", 0xC327F08, "x04/x00/x00/x00");
    MarcusVip.Bypass100 = MemoryPatch::createWithHex("libtersafe.so", 0xC328234, "x04/x00/x00/x00");
    MarcusVip.Bypass101 = MemoryPatch::createWithHex("libtersafe.so", 0xC328284, "x04/x00/x00/x00");
    MarcusVip.Bypass102 = MemoryPatch::createWithHex("libtersafe.so", 0xC32828C, "x04/x00/x00/x00");
    MarcusVip.Bypass103 = MemoryPatch::createWithHex("libtersafe.so", 0xC3282AC, "x04/x00/x00/x00");
    MarcusVip.Bypass104 = MemoryPatch::createWithHex("libtersafe.so", 0xC328524, "x04/x00/x00/x00");
    MarcusVip.Bypass105 = MemoryPatch::createWithHex("libtersafe.so", 0xC328760, "x04/x00/x00/x00");
    MarcusVip.Bypass106 = MemoryPatch::createWithHex("libtersafe.so", 0xC329934, "x04/x00/x00/x00");
    MarcusVip.Bypass107 = MemoryPatch::createWithHex("libtersafe.so", 0xC3299D8, "x04/x00/x00/x00");
    MarcusVip.Bypass108 = MemoryPatch::createWithHex("libtersafe.so", 0xC329A14, "x04/x00/x00/x00");
    MarcusVip.Bypass109 = MemoryPatch::createWithHex("libtersafe.so", 0xC329AF4, "x04/x00/x00/x00");
    MarcusVip.Bypass110 = MemoryPatch::createWithHex("libtersafe.so", 0xC329BD4, "x04/x00/x00/x00");
    MarcusVip.Bypass111 = MemoryPatch::createWithHex("libtersafe.so", 0xC329D00, "x04/x00/x00/x00");
    MarcusVip.Bypass112 = MemoryPatch::createWithHex("libtersafe.so", 0xC329EC0, "x04/x00/x00/x00");
    MarcusVip.Bypass113 = MemoryPatch::createWithHex("libtersafe.so", 0x1B220128, "x04/x00/x00/x00");
    MarcusVip.Bypass114 = MemoryPatch::createWithHex("libtersafe.so", 0x1B220FDC, "x04/x00/x00/x00");
    MarcusVip.Bypass115 = MemoryPatch::createWithHex("libtersafe.so", 0x1B57A20C, "x04/x00/x00/x00");
    MarcusVip.Bypass116 = MemoryPatch::createWithHex("libtersafe.so", 0x1BAC393C, "x04/x00/x00/x00");
    MarcusVip.Bypass117 = MemoryPatch::createWithHex("libtersafe.so", 0x1C202964, "x04/x00/x00/x00");
    MarcusVip.Bypass118 = MemoryPatch::createWithHex("libtersafe.so", 0x1C203BEC, "x04/x00/x00/x00");
    MarcusVip.Bypass119 = MemoryPatch::createWithHex("libtersafe.so", 0x1CBE1FD0, "x04/x00/x00/x00");
    MarcusVip.Bypass120 = MemoryPatch::createWithHex("libtersafe.so", 0x1CBE1FF8, "x04/x00/x00/x00");
     
    
    MarcusVip.Bypass121 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xC912A38, "x04/x00/x00/x00");
    MarcusVip.Bypass122 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA48118, "x04/x00/x00/x00");
    MarcusVip.Bypass123 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8D6A0, "x04/x00/x00/x00");
    MarcusVip.Bypass124 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8D874, "x04/x00/x00/x00");
    MarcusVip.Bypass125 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8D900, "x04/x00/x00/x00");
    MarcusVip.Bypass126 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8D954, "x04/x00/x00/x00");
    MarcusVip.Bypass127 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8DBE0, "x04/x00/x00/x00");
    MarcusVip.Bypass128 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8E0E0, "x04/x00/x00/x00");
    MarcusVip.Bypass129 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8E408, "x04/x00/x00/x00");
    MarcusVip.Bypass130 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8E4C4, "x04/x00/x00/x00");
    MarcusVip.Bypass131 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8E6E4, "x04/x00/x00/x00");
    MarcusVip.Bypass132 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8EC40, "x04/x00/x00/x00");
    MarcusVip.Bypass133 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8F56C, "x04/x00/x00/x00");
    MarcusVip.Bypass134 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8FA50, "x04/x00/x00/x00");
    MarcusVip.Bypass135 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8FAF0, "x04/x00/x00/x00");
    MarcusVip.Bypass136 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8FC8C, "x04/x00/x00/x00");
    MarcusVip.Bypass137 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8FD48, "x04/x00/x00/x00");
    MarcusVip.Bypass138 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA8FF08, "x04/x00/x00/x00");
    MarcusVip.Bypass139 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA90234, "x04/x00/x00/x00");
    MarcusVip.Bypass140 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA90284, "x04/x00/x00/x00");
    MarcusVip.Bypass141 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA9028C, "x04/x00/x00/x00");
    MarcusVip.Bypass142 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA902AC, "x04/x00/x00/x00");
    MarcusVip.Bypass143 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA90524, "x04/x00/x00/x00");
    MarcusVip.Bypass144 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA90760, "x04/x00/x00/x00");
    MarcusVip.Bypass145 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA91934, "x04/x00/x00/x00");
    MarcusVip.Bypass146 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA919D8, "x04/x00/x00/x00");
    MarcusVip.Bypass147 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA91A14, "x04/x00/x00/x00");
    MarcusVip.Bypass148 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA91AF4, "x04/x00/x00/x00");
    MarcusVip.Bypass149 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA91BD4, "x04/x00/x00/x00");
    MarcusVip.Bypass150 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA91D00, "x04/x00/x00/x00");
    MarcusVip.Bypass151 = MemoryPatch::createWithHex("Libtdatamaster.so", 0xCA91EC0, "x04/x00/x00/x00");
    MarcusVip.Bypass152 = MemoryPatch::createWithHex("Libtdatamaster.so", 0x1B988128, "x04/x00/x00/x00");
    MarcusVip.Bypass153 = MemoryPatch::createWithHex("Libtdatamaster.so", 0x1B988FDC, "x04/x00/x00/x00");
    MarcusVip.Bypass154 = MemoryPatch::createWithHex("Libtdatamaster.so", 0x1BCE220C, "x04/x00/x00/x00");
    MarcusVip.Bypass155 = MemoryPatch::createWithHex("Libtdatamaster.so", 0x1C22B93C, "x04/x00/x00/x00");
    MarcusVip.Bypass156 = MemoryPatch::createWithHex("Libtdatamaster.so", 0x1C96A964, "x04/x00/x00/x00");      
    MarcusVip.Bypass175 = MemoryPatch::createWithHex("Libtdatamaster.so", 0x1C96BBEC, "x04/x00/x00/x00");
    MarcusVip.Bypass176 = MemoryPatch::createWithHex("Libtdatamaster.so", 0x1D349FD0, "x04/x00/x00/x00");
    MarcusVip.Bypass177 = MemoryPatch::createWithHex("Libtdatamaster.so", 0x1D349FF8, "x04/x00/x00/x00");
    
    
   MarcusVip.Bypass178 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD6CFA38, "x04/x00/x00/x00");
    MarcusVip.Bypass179 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD805118, "x04/x00/x00/x00");
    MarcusVip.Bypass180 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84A6A0, "x04/x00/x00/x00");
    MarcusVip.Bypass181 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84A860, "x04/x00/x00/x00");
    MarcusVip.Bypass182 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84A874, "/x07/x08/x03/x08");
    MarcusVip.Bypass183 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84A900, "/x07/x08/x03/x08");
    MarcusVip.Bypass184 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84A954, "/x07/x08/x03/x08");
    MarcusVip.Bypass185 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84ABE0, "/x07/x08/x03/x08");
    MarcusVip.Bypass186 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84B0E0, "/x07/x08/x03/x08");
    MarcusVip.Bypass187 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84B408, "/x07/x08/x03/x08");
    MarcusVip.Bypass188 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84B4C4, "/x07/x08/x03/x08");
    MarcusVip.Bypass189 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84B6E4, "/x07/x08/x03/x08");
    MarcusVip.Bypass190 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84BC40, "/x07/x08/x03/x08");
    MarcusVip.Bypass191 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84C56C, "/x07/x08/x03/x08");
    MarcusVip.Bypass192 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84CA50, "/x07/x08/x03/x08");
    MarcusVip.Bypass193 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84CAF0, "/x07/x08/x03/x08");
    MarcusVip.Bypass194 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84CC8C, "/x07/x08/x03/x08");
    MarcusVip.Bypass195 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84CD48, "/x07/x08/x03/x08");
    MarcusVip.Bypass196 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84CF08, "/x07/x08/x03/x08");
    MarcusVip.Bypass197 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84D234, "/x07/x08/x03/x08");
    MarcusVip.Bypass198 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84D284, "/x07/x08/x03/x08");
    MarcusVip.Bypass199 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84D28C, "/x07/x08/x03/x08");
    MarcusVip.Bypass200 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84D2AC, "/x07/x08/x03/x08");
    MarcusVip.Bypass201 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84D524, "/x07/x08/x03/x08");
    MarcusVip.Bypass202 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84D760, "/x07/x08/x03/x08");
    MarcusVip.Bypass203 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84E934, "/x07/x08/x03/x08");
    MarcusVip.Bypass204 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84E9D8, "/x07/x08/x03/x08");
    MarcusVip.Bypass205 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84EA14, "/x07/x08/x03/x08");
    MarcusVip.Bypass206 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84EAF4, "/x07/x08/x03/x08");
    MarcusVip.Bypass207 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84EBD4, "/x07/x08/x03/x08");
    MarcusVip.Bypass208 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84ED00, "/x07/x08/x03/x08");
    MarcusVip.Bypass209 = MemoryPatch::createWithHex("libgnustl_shared.so", 0xD84EEC0, "/x07/x08/x03/x08");
    MarcusVip.Bypass210 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x1C745128, "/x07/x08/x03/x08");
    MarcusVip.Bypass211 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x1C745FDC, "/x07/x08/x03/x08");
    MarcusVip.Bypass212 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x1CA9F20C, "/x07/x08/x03/x08");
    MarcusVip.Bypass213 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x1CFE893C, "/x07/x08/x03/x08");
    MarcusVip.Bypass214 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x1D727964, "/x07/x08/x03/x08");
    MarcusVip.Bypass215 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x1D728BEC, "/x07/x08/x03/x08");
    MarcusVip.Bypass216 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x1E106FD0, "/x07/x08/x03/x08");
    MarcusVip.Bypass217 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x1E106FF8, "/x07/x08/x03/x08");
    
    
   /* MarcusVip.Bypass218 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8616ED0, "/x07/x08/x03/x08");
    MarcusVip.Bypass219 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8616ED8, "/x07/x08/x03/x08");
    MarcusVip.Bypass220 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86174C0, "/x07/x08/x03/x08");
    MarcusVip.Bypass221 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86174C8, "/x07/x08/x03/x08");
    MarcusVip.Bypass222 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86174D0, "/x07/x08/x03/x08");
    MarcusVip.Bypass223 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86174D8, "/x07/x08/x03/x08");
    MarcusVip.Bypass224 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86174E0, "/x07/x08/x03/x08");
    MarcusVip.Bypass225 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86174E8, "/x07/x08/x03/x08");
    MarcusVip.Bypass226 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86174F0, "/x07/x08/x03/x08");
    MarcusVip.Bypass227 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86174F8, "/x07/x08/x03/x08");
    MarcusVip.Bypass228 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86179E0, "/x07/x08/x03/x08");
    MarcusVip.Bypass229 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86179E8, "/x07/x08/x03/x08");
    MarcusVip.Bypass230 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x86179F0, "/x07/x08/x03/x08");
    MarcusVip.Bypass231 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8617A08, "/x07/x08/x03/x08");
    MarcusVip.Bypass232 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8617A10, "/x07/x08/x03/x08");
    MarcusVip.Bypass233 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8617A18, "/x07/x08/x03/x08");
    MarcusVip.Bypass234 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8617A38, "/x07/x08/x03/x08");
    MarcusVip.Bypass235 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8617A40, "/x07/x08/x03/x08");
    MarcusVip.Bypass236 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8617A48, "/x07/x08/x03/x08");
    MarcusVip.Bypass237 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8617A58, "/x07/x08/x03/x08");
    MarcusVip.Bypass238 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8617B4C, "/x07/x08/x03/x08");
    MarcusVip.Bypass239 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8617FD0, "/x07/x08/x03/x08");
    MarcusVip.Bypass240 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x8617FD8, "/x07/x08/x03/x08");
    MarcusVip.Bypass241 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864C2C4, "/x07/x08/x03/x08");
    MarcusVip.Bypass242 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864C8E8, "/x07/x08/x03/x08");
    MarcusVip.Bypass243 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864CB04, "/x07/x08/x03/x08");
    MarcusVip.Bypass244 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864CE08, "/x07/x08/x03/x08");
    MarcusVip.Bypass245 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864D1E4, "/x07/x08/x03/x08");
    MarcusVip.Bypass246 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864D284, "/x07/x08/x03/x08");
    MarcusVip.Bypass247 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864D294, "/x07/x08/x03/x08");
    MarcusVip.Bypass248 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864D598, "/x07/x08/x03/x08");
    MarcusVip.Bypass249 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864DA38, "/x07/x08/x03/x08");
    MarcusVip.Bypass250 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864DC64, "/x07/x08/x03/x08");
    MarcusVip.Bypass251 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864DFB8, "/x07/x08/x03/x08");
    MarcusVip.Bypass252 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864E014, "/x07/x08/x03/x08");
    MarcusVip.Bypass253 = MemoryPatch::createWithHex("libgnustl_shared.so", 0x864E034, "/x07/x08/x03/x08");
    
    
    /*
    MarcusVip.Bypass254 = MemoryPatch::createWithHex("libtersafe.so", 0x864E588, "/x07/x08/x03/x08");
    MarcusVip.Bypass255 = MemoryPatch::createWithHex("libtersafe.so", 0x864F004, "/x07/x08/x03/x08");
    MarcusVip.Bypass256 = MemoryPatch::createWithHex("libtersafe.so", 0x864F1E4, "/x07/x08/x03/x08");
    MarcusVip.Bypass257 = MemoryPatch::createWithHex("libtersafe.so", 0x864F498, "/x07/x08/x03/x08");
    MarcusVip.Bypass258 = MemoryPatch::createWithHex("libtersafe.so", 0x864F664 , "/x07/x08/x03/x08");
    MarcusVip.Bypass259 = MemoryPatch::createWithHex("libtersafe.so", 0x864F9D4, "/x07/x08/x03/x08");
    MarcusVip.Bypass260 = MemoryPatch::createWithHex("libtersafe.so", 0x864FA64, "/x07/x08/x03/x08");
    MarcusVip.Bypass261 = MemoryPatch::createWithHex("libtersafe.so", 0x864FD48, "/x07/x08/x03/x08");
    MarcusVip.Bypass262 = MemoryPatch::createWithHex("libtersafe.so", 0x864FDA4, "/x07/x08/x03/x08");
    MarcusVip.Bypass263 = MemoryPatch::createWithHex("libtersafe.so", 0xB9C3B00, "/x07/x08/x03/x08");
    MarcusVip.Bypass264 = MemoryPatch::createWithHex("libtersafe.so", 0xC6C08C8, "/x07/x08/x03/x08");
    MarcusVip.Bypass265 = MemoryPatch::createWithHex("libtersafe.so", 0xC86F170, "/x07/x08/x03/x08");
    MarcusVip.Bypass266 = MemoryPatch::createWithHex("libtersafe.so", 0x3D69AE64, "/x07/x08/x03/x08");
    MarcusVip.Bypass267 = MemoryPatch::createWithHex("libtersafe.so", 0x3D74B198, "/x07/x08/x03/x08");
    MarcusVip.Bypass268 = MemoryPatch::createWithHex("libtersafe.so", 0x3DC8C16C, "/x07/x08/x03/x08");
    MarcusVip.Bypass269 = MemoryPatch::createWithHex("libtersafe.so", 0x3E34E594, "/x07/x08/x03/x08");
    MarcusVip.Bypass270 = MemoryPatch::createWithHex("libtersafe.so", 0x3E6DF914, "/x07/x08/x03/x08");
    MarcusVip.Bypass271 = MemoryPatch::createWithHex("libtersafe.so", 0x3E6EB87C, "/x07/x08/x03/x08");
    MarcusVip.Bypass272 = MemoryPatch::createWithHex("libtersafe.so", 0x3E6EB9B4, "/x07/x08/x03/x08");
    MarcusVip.Bypass273 = MemoryPatch::createWithHex("libtersafe.so", 0x3E6EBA78, "/x07/x08/x03/x08");
    MarcusVip.Bypass274 = MemoryPatch::createWithHex("libtersafe.so", 0x3E70B3C0, "/x07/x08/x03/x08");
    MarcusVip.Bypass275 = MemoryPatch::createWithHex("libtersafe.so", 0x3E70B3DC, "/x07/x08/x03/x08");
    MarcusVip.Bypass276 = MemoryPatch::createWithHex("libtersafe.so", 0x3E70B65C, "/x07/x08/x03/x08");
    MarcusVip.Bypass277 = MemoryPatch::createWithHex("libtersafe.so", 0x3E70B6BC, "/x07/x08/x03/x08");
    MarcusVip.Bypass278 = MemoryPatch::createWithHex("libtersafe.so", 0x3E70DD50, "/x07/x08/x03/x08");
    MarcusVip.Bypass279 = MemoryPatch::createWithHex("libtersafe.so", 0x3E711EB8, "/x07/x08/x03/x08");
    MarcusVip.Bypass280 = MemoryPatch::createWithHex("libtersafe.so", 0x238ABFC4, "/x07/x08/x03/x08");
    MarcusVip.Bypass281 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC2BF8, "/x07/x08/x03/x08");
    MarcusVip.Bypass282 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC2A18, "/x07/x08/x03/x08");
    MarcusVip.Bypass283 = MemoryPatch::createWithHex("libtersafe.so", 0x2C614918, "/x07/x08/x03/x08");
    MarcusVip.Bypass284 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC2958, "/x07/x08/x03/x08");
    MarcusVip.Bypass285 = MemoryPatch::createWithHex("libtersafe.so", 0x238ABFF8, "/x07/x08/x03/x08");
    MarcusVip.Bypass286 = MemoryPatch::createWithHex("libtersafe.so", 0x238ABFC8, "/x07/x08/x03/x08");
    MarcusVip.Bypass287 = MemoryPatch::createWithHex("libtersafe.so", 0x22874FCC, "/x07/x08/x03/x08");
    MarcusVip.Bypass288 = MemoryPatch::createWithHex("libtersafe.so", 0x22874F48, "/x07/x08/x03/x08");
    MarcusVip.Bypass289 = MemoryPatch::createWithHex("libtersafe.so", 0x22874F44, "/x07/x08/x03/x08");
    MarcusVip.Bypass290 = MemoryPatch::createWithHex("libtersafe.so", 0x22874F38, "/x07/x08/x03/x08");
    MarcusVip.Bypass291 = MemoryPatch::createWithHex("libtersafe.so", 0x22874F18, "/x07/x08/x03/x08");
    MarcusVip.Bypass292 = MemoryPatch::createWithHex("libtersafe.so", 0x22874F04, "/x07/x08/x03/x08");
    MarcusVip.Bypass293 = MemoryPatch::createWithHex("libtersafe.so", 0x22874EC4, "/x07/x08/x03/x08");
    MarcusVip.Bypass294 = MemoryPatch::createWithHex("libtersafe.so", 0x22874EB4, "/x07/x08/x03/x08");
    MarcusVip.Bypass295 = MemoryPatch::createWithHex("libtersafe.so", 0x1E79C858, "/x07/x08/x03/x08");
    MarcusVip.Bypass296 = MemoryPatch::createWithHex("libtersafe.so", 0x22874EB0, "/x07/x08/x03/x08");
    MarcusVip.Bypass297 = MemoryPatch::createWithHex("libtersafe.so", 0x1E79C850, "/x07/x08/x03/x08");
    MarcusVip.Bypass298 = MemoryPatch::createWithHex("libtersafe.so", 0x1E79C854, "/x07/x08/x03/x08");
    MarcusVip.Bypass299 = MemoryPatch::createWithHex("libtersafe.so", 0x1E79BEB0, "/x07/x08/x03/x08");
    MarcusVip.Bypass300 = MemoryPatch::createWithHex("libtersafe.so", 0x23E98D64, "/x07/x08/x03/x08");
    MarcusVip.Bypass301 = MemoryPatch::createWithHex("libtersafe.so", 0x23E98CA4, "/x07/x08/x03/x08");
    MarcusVip.Bypass302 = MemoryPatch::createWithHex("libtersafe.so", 0x23E4EB34, "/x07/x08/x03/x08");
    MarcusVip.Bypass303 = MemoryPatch::createWithHex("libtersafe.so", 0x23E4EB04, "/x07/x08/x03/x08");
    MarcusVip.Bypass304 = MemoryPatch::createWithHex("libtersafe.so", 0x2C60B2E0, "/x07/x08/x03/x08");
    MarcusVip.Bypass305 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC2B04, "/x07/x08/x03/x08");
    MarcusVip.Bypass306 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC2A14, "/x07/x08/x03/x08");
    MarcusVip.Bypass307 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC2984, "/x07/x08/x03/x08");
    MarcusVip.Bypass308 = MemoryPatch::createWithHex("libtersafe.so", 0x23E98D94, "/x07/x08/x03/x08");
    MarcusVip.Bypass309 = MemoryPatch::createWithHex("libtersafe.so", 0x23E98554, "/x07/x08/x03/x08");
    MarcusVip.Bypass310 = MemoryPatch::createWithHex("libtersafe.so", 0x23E984EC, "/x07/x08/x03/x08");
    MarcusVip.Bypass311 = MemoryPatch::createWithHex("libtersafe.so", 0x23E97C84, "/x07/x08/x03/x08");
    MarcusVip.Bypass312 = MemoryPatch::createWithHex("libtersafe.so", 0x23E97C54, "/x07/x08/x03/x08");
    MarcusVip.Bypass313 = MemoryPatch::createWithHex("libtersafe.so", 0x28CB94C0, "/x07/x08/x03/x08");
    MarcusVip.Bypass314 = MemoryPatch::createWithHex("libtersafe.so", 0x241F7A4C, "/x07/x08/x03/x08");
    MarcusVip.Bypass315 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC4FF4, "/x07/x08/x03/x08");
    MarcusVip.Bypass316 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC4EA4, "/x07/x08/x03/x08");
    MarcusVip.Bypass317 = MemoryPatch::createWithHex("libtersafe.so", 0x238AB694, "/x07/x08/x03/x08");
    MarcusVip.Bypass318 = MemoryPatch::createWithHex("libtersafe.so", 0x238A9FB4, "/x07/x08/x03/x08");
    MarcusVip.Bypass319 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC2A18, "/x07/x08/x03/x08");
    MarcusVip.Bypass320 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC2958, "/x07/x08/x03/x08"); 
    
    MarcusVip.Bypass321 = MemoryPatch::createWithHex("libtersafe.so", 0x238ABFF8, "/x07/x08/x03/x08");
    MarcusVip.Bypass322 = MemoryPatch::createWithHex("libtersafe.so", 0x238ABFC8, "/x07/x08/x03/x08");
    MarcusVip.Bypass323 = MemoryPatch::createWithHex("libtersafe.so", 0x2C67EFF8, "/x07/x08/x03/x08");
    MarcusVip.Bypass324 = MemoryPatch::createWithHex("libtersafe.so", 0x28A30FF8, "/x07/x08/x03/x08");
    MarcusVip.Bypass325 = MemoryPatch::createWithHex("libtersafe.so", 0x2C614978, "/x07/x08/x03/x08");
    MarcusVip.Bypass326 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC4F94, "/x07/x08/x03/x08");
    MarcusVip.Bypass327 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC2A14, "/x07/x08/x03/x08");
    MarcusVip.Bypass328 = MemoryPatch::createWithHex("libtersafe.so", 0x23EC2984, "/x07/x08/x03/x08");
    MarcusVip.Bypass329 = MemoryPatch::createWithHex("libtersafe.so", 0x23E99544, "/x07/x08/x03/x08");
    MarcusVip.Bypass330 = MemoryPatch::createWithHex("libtersafe.so", 0x23E98DF4, "/x07/x08/x03/x08");
    MarcusVip.Bypass331 = MemoryPatch::createWithHex("libtersafe.so", 0x23E98D94, "/x07/x08/x03/x08");
    MarcusVip.Bypass332 = MemoryPatch::createWithHex("libgcloud.so", 0x8A89E38, "/x07/x08/x03/x08");
    MarcusVip.Bypass333 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93468, "/x07/x08/x03/x08");
    MarcusVip.Bypass334 = MemoryPatch::createWithHex("libgcloud.so", 0x8A934D8, "/x07/x08/x03/x08");
    MarcusVip.Bypass335 = MemoryPatch::createWithHex("libgcloud.so", 0x8A935D8, "/x07/x08/x03/x08");
    MarcusVip.Bypass336 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93688, "/x07/x08/x03/x08");
    MarcusVip.Bypass337 = MemoryPatch::createWithHex("libgcloud.so", 0x8A936E8, "/x07/x08/x03/x08");
    MarcusVip.Bypass338 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93718, "/x07/x08/x03/x08");
    MarcusVip.Bypass339 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93758, "/x07/x08/x03/x08");
    MarcusVip.Bypass340 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93838, "/x07/x08/x03/x08");
    MarcusVip.Bypass341 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93848, "/x07/x08/x03/x08");
    MarcusVip.Bypass342 = MemoryPatch::createWithHex("libgcloud.so", 0x8A938F8, "/x07/x08/x03/x08");
    MarcusVip.Bypass343 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93978, "/x07/x08/x03/x08");
    MarcusVip.Bypass344 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93988, "/x07/x08/x03/x08");
    MarcusVip.Bypass345 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93A88, "/x07/x08/x03/x08");
    MarcusVip.Bypass346 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93A98, "/x07/x08/x03/x08");
    MarcusVip.Bypass347 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93AA8, "/x07/x08/x03/x08");
    MarcusVip.Bypass348 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93B18, "/x07/x08/x03/x08");
    MarcusVip.Bypass349 = MemoryPatch::createWithHex("libgcloud.so", 0x8A93B98, "/x07/x08/x03/x08");
    MarcusVip.Bypass350 = MemoryPatch::createWithHex("libgcloud.so", 0x122DA11C, "/x07/x08/x03/x08");
    MarcusVip.Bypass351 = MemoryPatch::createWithHex("libgcloud.so", 0x122DA778, "/x07/x08/x03/x08");
    MarcusVip.Bypass352 = MemoryPatch::createWithHex("libgcloud.so", 0x1239340C, "/x07/x08/x03/x08");
    MarcusVip.Bypass353 = MemoryPatch::createWithHex("libgcloud.so", 0x1BBF49A4, "/x07/x08/x03/x08");
    MarcusVip.Bypass354 = MemoryPatch::createWithHex("libgcloud.so", 0x1BBF4A54, "/x07/x08/x03/x08");
    MarcusVip.Bypass355 = MemoryPatch::createWithHex("libgcloud.so", 0x1BBF4A84, "/x07/x08/x03/x08");
    MarcusVip.Bypass356 = MemoryPatch::createWithHex("libgcloud.so", 0x1BBF4C34, "/x07/x08/x03/x08");
    MarcusVip.Bypass357 = MemoryPatch::createWithHex("libgcloud.so", 0x1BBF4D9C, "/x07/x08/x03/x08");
    MarcusVip.Bypass358 = MemoryPatch::createWithHex("libgcloud.so", 0x1BBF4E14, "/x07/x08/x03/x08");
    MarcusVip.Bypass359 = MemoryPatch::createWithHex("libgcloud.so", 0x1C31065C, "/x07/x08/x03/x08");
    MarcusVip.Bypass360 = MemoryPatch::createWithHex("libgcloud.so", 0x1C310A1C, "/x07/x08/x03/x08");
    MarcusVip.Bypass361 = MemoryPatch::createWithHex("libgcloud.so", 0x1C310B5C, "/x07/x08/x03/x08");
    MarcusVip.Bypass362 = MemoryPatch::createWithHex("libgcloud.so", 0x1C34EA84, "/x07/x08/x03/x08");
    MarcusVip.Bypass363 = MemoryPatch::createWithHex("libgcloud.so", 0x1C3852B4, "/x07/x08/x03/x08");
    MarcusVip.Bypass364 = MemoryPatch::createWithHex("libgcloud.so", 0x1C3858B4, "/x07/x08/x03/x08");
    MarcusVip.Bypass365 = MemoryPatch::createWithHex("libgcloud.so", 0x1C385CA4, "/x07/x08/x03/x08");
    MarcusVip.Bypass366 = MemoryPatch::createWithHex("libgcloud.so", 0x1C385E54, "/x07/x08/x03/x08");
    MarcusVip.Bypass367 = MemoryPatch::createWithHex("libgcloud.so", 0x1C3A8774, "/x07/x08/x03/x08");
    MarcusVip.Bypass368 = MemoryPatch::createWithHex("libgcloud.so", 0x1C3A87CC, "/x07/x08/x03/x08");
    MarcusVip.Bypass369 = MemoryPatch::createWithHex("libgcloud.so", 0x1C3B2CB0, "/x07/x08/x03/x08");
    MarcusVip.Bypass370 = MemoryPatch::createWithHex("libgcloud.so", 0x1C3B2E4C, "/x07/x08/x03/x08");
    MarcusVip.Bypass371 = MemoryPatch::createWithHex("libgcloud.so", 0x1D22FDC4, "/x07/x08/x03/x08");
    MarcusVip.Bypass372 = MemoryPatch::createWithHex("libgcloud.so", 0x1D230664, "/x07/x08/x03/x08");
    MarcusVip.Bypass373 = MemoryPatch::createWithHex("libgcloud.so", 0x1D230BA4, "/x07/x08/x03/x08");
    MarcusVip.Bypass374 = MemoryPatch::createWithHex("libgcloud.so", 0x1D231954, "/x07/x08/x03/x08");
    MarcusVip.Bypass375 = MemoryPatch::createWithHex("libgcloud.so", 0x1D23416C, "/x07/x08/x03/x08");
    MarcusVip.Bypass376 = MemoryPatch::createWithHex("libgcloud.so", 0x1D234A3C, "/x07/x08/x03/x08");
    MarcusVip.Bypass377 = MemoryPatch::createWithHex("libgcloud.so", 0x1D234AA4, "/x07/x08/x03/x08");
    MarcusVip.Bypass378 = MemoryPatch::createWithHex("libgcloud.so", 0x1D3F7D34, "/x07/x08/x03/x08");
    MarcusVip.Bypass379 = MemoryPatch::createWithHex("libgcloud.so", 0x1D3F965C, "/x07/x08/x03/x08");
    MarcusVip.Bypass380 = MemoryPatch::createWithHex("libgcloud.so", 0x1D3F9780, "/x07/x08/x03/x08");
    MarcusVip.Bypass381 = MemoryPatch::createWithHex("libgcloud.so", 0x1D3F979C, "/x07/x08/x03/x08");
    MarcusVip.Bypass382 = MemoryPatch::createWithHex("libgcloud.so", 0x1D3F9B40, "/x07/x08/x03/x08");
    MarcusVip.Bypass383 = MemoryPatch::createWithHex("libgcloud.so", 0x1D3F9EA0, "/x07/x08/x03/x08");
    MarcusVip.Bypass384 = MemoryPatch::createWithHex("libgcloud.so", 0x1D3F9F1C, "/x07/x08/x03/x08");
    MarcusVip.Bypass385 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE6BBC, "/x07/x08/x03/x08");
    MarcusVip.Bypass386 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8064, "/x07/x08/x03/x08");
    MarcusVip.Bypass387 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8124, "/x07/x08/x03/x08");
    MarcusVip.Bypass388 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8214, "/x07/x08/x03/x08");
    MarcusVip.Bypass389 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE82D4, "/x07/x08/x03/x08");
    MarcusVip.Bypass390 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8304, "/x07/x08/x03/x08");
    MarcusVip.Bypass391 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8364, "/x07/x08/x03/x08");
    MarcusVip.Bypass392 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8394, "/x07/x08/x03/x08");
    MarcusVip.Bypass393 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8754, "/x07/x08/x03/x08");
    MarcusVip.Bypass394 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8A24, "/x07/x08/x03/x08");
    MarcusVip.Bypass395 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8DE4, "/x07/x08/x03/x08");
    MarcusVip.Bypass396 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8EA4, "/x07/x08/x03/x08");
    MarcusVip.Bypass397 = MemoryPatch::createWithHex("libgcloud.so", 0x1DAE8FF4, "/x07/x08/x03/x08"); 
    
    
    MarcusVip.Bypass398 = MemoryPatch::createWithHex("libtersafe.so", 0xF015D80, "x04/x00/x00/x00");
    MarcusVip.Bypass399 = MemoryPatch::createWithHex("libtersafe.so", 0xF015DE0, "x04/x00/x00/x00");  
    MarcusVip.Bypass400 = MemoryPatch::createWithHex("libtersafe.so", 0xF01B4BC, "x04/x00/x00/x00");
    MarcusVip.Bypass401 = MemoryPatch::createWithHex("libtersafe.so", 0xF01A00C, "x04/x00/x00/x00");
    MarcusVip.Bypass402 = MemoryPatch::createWithHex("libtersafe.so", 0xF01B8BC, "x04/x00/x00/x00");
    MarcusVip.Bypass403 = MemoryPatch::createWithHex("libtersafe.so", 0xF01CB98, "x04/x00/x00/x00");
    MarcusVip.Bypass404 = MemoryPatch::createWithHex("libtersafe.so", 0xF01F468, "x04/x00/x00/x00");
    MarcusVip.Bypass405 = MemoryPatch::createWithHex("libtersafe.so", 0xF028780, "x04/x00/x00/x00");
    MarcusVip.Bypass406 = MemoryPatch::createWithHex("libtersafe.so", 0xF0299EC, "x04/x00/x00/x00");
    MarcusVip.Bypass407 = MemoryPatch::createWithHex("libtersafe.so", 0xF02B608, "x04/x00/x00/x00");
    MarcusVip.Bypass408 = MemoryPatch::createWithHex("libtersafe.so", 0xF02B658, "x04/x00/x00/x00");
    MarcusVip.Bypass409 = MemoryPatch::createWithHex("libtersafe.so", 0xF02C968, "x04/x00/x00/x00");
    MarcusVip.Bypass410 = MemoryPatch::createWithHex("libtersafe.so", 0xF02CD18, "x04/x00/x00/x00");
    MarcusVip.Bypass411 = MemoryPatch::createWithHex("libtersafe.so", 0xF02D1D8, "x04/x00/x00/x00");
    MarcusVip.Bypass412 = MemoryPatch::createWithHex("libtersafe.so", 0xF02DF98, "x04/x00/x00/x00");
    MarcusVip.Bypass413 = MemoryPatch::createWithHex("libtersafe.so", 0xF02E038, "x04/x00/x00/x00");
    MarcusVip.Bypass414 = MemoryPatch::createWithHex("libtersafe.so", 0xF030EA0, "x04/x00/x00/x00");
    MarcusVip.Bypass415 = MemoryPatch::createWithHex("libtersafe.so", 0xF03139C, "x04/x00/x00/x00");
    
    */


                          // MEMORY MENU // 
                          
 MarcusVip.Hit = MemoryPatch::createWithHex("libUE4.so", 0x14EE250, "00 00 A0 40");
MarcusVip.Lesscoil = MemoryPatch::createWithHex("libUE4.so", 0x15C5DD8, "00 00 00 00");
MarcusVip.Noshake = MemoryPatch::createWithHex("libUE4.so", 0x3DB0C90, "00 00 00 00");
MarcusVip.Noshake1 = MemoryPatch::createWithHex("libUE4.so", 0x3B583C0, "EE 10 0A 10");
MarcusVip.Blackbody = MemoryPatch::createWithHex("libUE4.so", 0x3286EA8, "00 00 00 41");
MarcusVip.Aimbot1 = MemoryPatch::createWithHex("libUE4.so", 0x29F71E0, "00 00 00 00");
MarcusVip.Aimbot2 = MemoryPatch::createWithHex("libUE4.so", 0x29F71E0, "00 3C 1C 46");   
MarcusVip.Blacksky = MemoryPatch::createWithHex("libUE4.so", 0x4072B90, "B0 C6 27 B7");
MarcusVip.Nofog = MemoryPatch::createWithHex("libUE4.so", 0x31FC4C8, "00 00 00 00");
MarcusVip.Speedcar = MemoryPatch::createWithHex("libUE4.so", 0x4D0AFDC, "00 00 00 00");
MarcusVip.Carjump = MemoryPatch::createWithHex("libUE4.so", 0x4D121D0, "00 00 00 00");     
MarcusVip.Longjump = MemoryPatch::createWithHex("libUE4.so", 0x13B9B20, "02 1A B7 EE");
MarcusVip.Flash = MemoryPatch::createWithHex("libUE4.so", 0x443E32C, "00 00 B4 41");
MarcusVip.Statuemode = MemoryPatch::createWithHex("libUE4.so", 0x37DAF7C, "00 C0 79 44");
MarcusVip.Darkmode = MemoryPatch::createWithHex("libUE4.so", 0x33F9568, "00 00 00 00");
MarcusVip.Desertmap = MemoryPatch::createWithHex("libUE4.so", 0x376EA50, "00 00 00 00");
MarcusVip.Notree = MemoryPatch::createWithHex("libUE4.so", 0x3EB54EC, "00 00 00 00");
MarcusVip.Fixstuck = MemoryPatch::createWithHex("libUE4.so", 0x1541460, "00 00 00 00");
MarcusVip.Slowmotion = MemoryPatch::createWithHex("libUE4.so", 0x3DDEC5C, "00 00 00 00");
MarcusVip.Antipull = MemoryPatch::createWithHex("libUE4.so", 0x3E01C40, " 8F C2 75 3E");
MarcusVip.WallLoot = MemoryPatch::createWithHex("libUE4.so", 0x4B510E4, "00 00 00 00");
MarcusVip.Maggic = MemoryPatch::createWithHex("libUE4.so", 0x41ED350, "00 00 00 41");
MarcusVip.Speedrun = MemoryPatch::createWithHex("libUE4.so", 0x3E0F7D8, "00 00 00 00");
MarcusVip.Standscope = MemoryPatch::createWithHex("libUE4.so", 0x29EE38C, "00 00 00 41");
MarcusVip.Pronescope = MemoryPatch::createWithHex("libUE4.so", 0x29EE390, "00 00 00 41");
MarcusVip.Knockspeed = MemoryPatch::createWithHex("libUE4.so", 0x13B9B04, "00 00 00 41");
MarcusVip.Xhit = MemoryPatch::createWithHex("libUE4.so", 0x1D52E50, "00 00 00 00");
MarcusVip.Autodrive = MemoryPatch::createWithHex("libUE4.so", 0x57FE74C, "00 00 00 00");
MarcusVip.Wallshot1 = MemoryPatch::createWithHex("libUE4.so", 0x29EE38C, "00 00 00 00");
MarcusVip.Wallshot2 = MemoryPatch::createWithHex("libUE4.so", 0x29EE390, "00 00 00 00");
MarcusVip.Wallshot3 = MemoryPatch::createWithHex("libUE4.so", 0x29EE394, "00 00 00 00");
MarcusVip.Redfog1 = MemoryPatch::createWithHex("libUE4.so", 0x31FC4CC, "00 00 00 00");
MarcusVip.Redfog2= MemoryPatch::createWithHex("libUE4.so", 0x31FC4D8, "00 00 00 00");
MarcusVip.Blackfog1 = MemoryPatch::createWithHex("libUE4.so", 0x31FC4BC, "00 00 00 00");
MarcusVip.Blackfog2= MemoryPatch::createWithHex("libUE4.so", 0x31FC4CC, "00 00 00 00");
MarcusVip.Blackfog3= MemoryPatch::createWithHex("libUE4.so", 0x31FC4D8, "00 00 00 00");
MarcusVip.Greenfog1 = MemoryPatch::createWithHex("libUE4.so", 0x31FC4BC, "00 00 00 00");
MarcusVip.Greenfog2 = MemoryPatch::createWithHex("libUE4.so", 0x31FC4D8, "00 00 00 00");
MarcusVip.Darkbluefog1 = MemoryPatch::createWithHex("libUE4.so", 0x31FC4BC, "00 00 00 00");
MarcusVip.Darkbluefog2 = MemoryPatch::createWithHex("libUE4.so", 0x31FC4CC, "00 00 00 00");
MarcusVip.Cyanfog = MemoryPatch::createWithHex("libUE4.so", 0x31FC4BC, "00 00 00 00");
MarcusVip.Purplefog = MemoryPatch::createWithHex("libUE4.so", 0x31FC4CC, "00 00 00 00");
MarcusVip.Litegreenfog = MemoryPatch::createWithHex("libUE4.so", 0x31FC4D8, "00 00 00 00");
MarcusVip.Aim1 = MemoryPatch::createWithHex("libUE4.so", 0x1152178, "41 0A 00 EE");
MarcusVip.Aim2 = MemoryPatch::createWithHex("libUE4.so", 0x14BF76C, "01 00 A0 E3");
MarcusVip.Aim3 = MemoryPatch::createWithHex("libUE4.so", 0x11B2D98, "01 00 00 7A");
MarcusVip.Aim4 = MemoryPatch::createWithHex("libUE4.so", 0x11B2E18, "01 00 00 EA");
MarcusVip.Aim5 = MemoryPatch::createWithHex("libUE4.so", 0x11B3E60, "01 00 00 7A");
MarcusVip.Aim6 = MemoryPatch::createWithHex("libUE4.so", 0x1650C68, "01 00 00 7A");
MarcusVip.Aim7 = MemoryPatch::createWithHex("libUE4.so", 0x1F55E58, "01 00 00 7A");
MarcusVip.Aim8 = MemoryPatch::createWithHex("libUE4.so", 0x29ED9C0, "01 00 00 7A");
MarcusVip.Aim9 = MemoryPatch::createWithHex("libUE4.so", 0x2F525D0, "01 00 00 EA");
MarcusVip.Aim10 = MemoryPatch::createWithHex("libUE4.so", 0x39EC570, "01 00 00 7A");
MarcusVip.Aim11 = MemoryPatch::createWithHex("libUE4.so", 0x3D01090, "01 00 00 7A");
MarcusVip.Aim12 = MemoryPatch::createWithHex("libUE4.so", 0x3D14130, "01 00 00 7A");
MarcusVip.Aim13 = MemoryPatch::createWithHex("libUE4.so", 0x536E590, "01 00 00 7A");
    
    return NULL;
}
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    JNIEnv *env;
    vm->GetEnv((void **) &env, JNI_VERSION_1_6);

    if (Register1(env) != 0)
        return -1;

    if (Register2(env) != 0)
        return -1;
    pthread_t ptid;
    pthread_create(&ptid, NULL, hack_thread, NULL);
    Tools::Hook((void *) env->functions->FindClass, (void *) hkFindClass, (void **) &orig_FindClass);

    return JNI_VERSION_1_6;
}


